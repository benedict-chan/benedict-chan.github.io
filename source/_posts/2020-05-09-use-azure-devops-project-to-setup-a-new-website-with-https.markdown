---
layout: post
title: "Use Azure Devops project to setup a new Website with https"
date: 2020-05-09 01:28:58 +0000
comments: true
categories: ["asp.net", "azure vm", "azure devops", "https", "iis"]
description: Azure IIS website with https
keywords: "asp.net, iis, https, azure devops"
---

## Create an Azure Devops Project

Make sure you have a valid azure account, at the moment it has to be a pay-as-you-go one even it is in free trial.

We will get started by creating a DevOps starter in Azure.

https://docs.microsoft.com/en-us/azure/devops-project/azure-devops-project-vms

We can verify if all resources has been created.



#### Migrate our project

##### Create our build pipeline

Create our own build pipeline. Looking at the build pipeline from the DevOps Starter, the most important output from the pipeline is:

- The web deployment zip package
- The SQL server dacpac package
- The ARM template to create Azure Resources

So I need to make sure my build should have the above too.

Copying the ARM template from the generated Repository to our repository such that our build pipeline will also contains the ARM template in the artifacts published.

##### Create our release pipeline

To keep the generated pipeline as a reference, I cloned the existing release pipeline, in this case hopefully we can reuse all the reference and permissions especially the deployment ground created by the DevOps Starter.

After cloning the release pipeline, the first thing we should do is to reset the following password in both Azure and the variables setup in DevOps:

- dbPassword
- vmPassword

Because the above password was generated by the DevOps Starter and stored as secrets in the original release pipeline, I need to reset them in Azure and store them as secrets for this new pipeline.



###### Create Artifacts of Release Pipeline

Create a new artifacts from the new build pipeline created above

Update SQL package path from the Task: `Execute Azure SQL`, reference it to our build artifacts instead of the original one.

Update Deployment package path from the Task: `Deploy application to Website`, reference it to our build artifacts instead of the original one.

Update IIS Bindings from the Task: `Create Website`, in here, we can add our existing domain name to the bindings, we can also add https binding here if we have our SSL certificate thumbprint. I am using a subdomain here just for testing, and update it to in when the whole migration is done. I will also leave the https part here as I am going to request a new certificate later in the VM.

##### SSL HTTPS support

The DevOps starter doesn't setup HTTPS, so in order to add HTTPS support, we need to at least open the port.

{% raw %}
``` js windows-vm-sql-template.json start:198 mark:201
          {
            "name": "https_rule",
            "properties": {
              "description": "Allow WEB SSL",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 111,
              "direction": "Inbound"
            }
          }
```
{% endraw %}

##### URL Rewrite

The DevOps starter doesn't install IIS URL Rewrite, by investigating the generated ARM template, we will easily find out they use a Powershell script to 

- Add Web Server features 
- Download and install Web Deploy

Therefore, we can simply follow the way they install Web Deploy to install URL Rewrite, just add the following after the Web Deploy installation script and we will have the URL Rewrite module download and installed on our VM.

`Invoke-WebRequest https://download.microsoft.com/download/1/2/8/128E2E22-C1B9-44A4-BE2A-5859ED1D4592/rewrite_amd64_en-US.msi -outfile $env:temp\\rewrite_amd64_en-US.msi; Start-Process $env:temp\\rewrite_amd64_en-US.msi -ArgumentList \"/quiet\" -Wait'`



#### Database Migration

Now my new build pipeline and release pipeline is ready, as the release pipeline will execute my SQL package on the database, I need to first restore my database backup to the Azure SQL before my SQL package is going to execute onto it.

This process depends how you are migrating, as this is just a one time process in the real migration, I plan to use SQL Server Management Studio to directly deploy my local DB to Azure SQL. In that case, I just need to make sure the machine I run SQL Server Management Studio can connect to my Azure SQL server instance. Therefore I need to add a Client IP address to the Azure SQL server.



 



<!-- more -->