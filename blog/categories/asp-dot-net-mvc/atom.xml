<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: asp.net mvc | Benedict Chan]]></title>
  <link href="http://benedict-chan.github.io/blog/categories/asp-dot-net-mvc/atom.xml" rel="self"/>
  <link href="http://benedict-chan.github.io/"/>
  <updated>2014-04-16T14:37:57+10:00</updated>
  <id>http://benedict-chan.github.io/</id>
  <author>
    <name><![CDATA[Benedict Chan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Authentication logics from ASP.NET MVC 4 to 5]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/03/28/authentication-logics-from-asp-dot-net-mvc-4-to-5/"/>
    <updated>2014-03-28T16:14:24+11:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/03/28/authentication-logics-from-asp-dot-net-mvc-4-to-5</id>
    <content type="html"><![CDATA[<h2>OWIN</h2>

<p>To allow security sharing by other components that can be hosted on <a href="http://owin.org/" target="_blank">OWIN</a>.
<strong>ASP.NET MVC 5</strong>  has applied a new security feature based on the <strong>OWIN</strong> authentication middleware.</p>

<p>For more information, please click <a href="http://blogs.msdn.com/b/webdev/archive/2013/07/03/understanding-owin-forms-authentication-in-mvc-5.aspx" target="_blank">here</a>.</p>

<p>To start, let&rsquo;s create a new project based on Visual Studio 2013&rsquo;s  template: <strong>Individual User Accounts</strong>.</p>

<h2>MVC5 Template: Individual User Accounts</h2>

<p>Have a look in the <code>web.config</code> of this newly created project. We will find that <code>FormsAuthenticationModule</code> is removed.</p>

<p>
``` cs web.config
&lt;system.webServer></p>

<pre><code>&lt;modules&gt;
    &lt;remove name="FormsAuthenticationModule" /&gt;
&lt;/modules&gt;
</code></pre>

<p>&lt;/system.webServer>
```
</p>

<p>Now also have a look in what&rsquo;s the new logic is added for supporting <strong>OWIN</strong>.

``` cs \app_start\startup.auth.cs start:10 mark:13-17,19</p>

<pre><code>public void ConfigureAuth(IAppBuilder app)
{
    // Enable the application to use a cookie to store information for the signed in user
    app.UseCookieAuthentication(new CookieAuthenticationOptions
    {
        AuthenticationType = DefaultAuthenticationTypes.ApplicationCookie,
        LoginPath = new PathString("/Account/Login")
    });
    // Use a cookie to temporarily store information about a user logging in with a third party login provider
    app.UseExternalSignInCookie(DefaultAuthenticationTypes.ExternalCookie);
</code></pre>

<p>```
</p>

<p>It looks like the template offers a <code>Cookie</code> authentication as default, does it work if we applies our <strong>ASP.NET MVC 4</strong>&rsquo;s <code>FormsAuthenticationTicket</code> to it?</p>

<!-- more -->


<h2>FormsAuthenticationTicket in MVC4</h2>

<p>We normally authenticate users in the following way in MVC4

``` cs</p>

<pre><code>        var ticket = new FormsAuthenticationTicket(..);
        var encryptedTicket = FormsAuthentication.Encrypt(ticket);
        var cookie = new HttpCookie(FormsAuthentication.FormsCookieName, encryptedTicket)
        {
            HttpOnly = true, Path = FormsAuthentication.FormsCookiePath
        };
        Response.Cookies.Add(cookie);
</code></pre>

<p>```
</p>

<p>Now, if we apply this logic in our <strong>MVC5</strong> application, we will find that we do have added our authentication cookie, however, as <strong>MVC5</strong> follows the OWIN middleware, it has no way to understand our user is authenticated or not in <code>Request.IsAuthenticated</code>.</p>

<h2>AuthenticationManager in MVC5</h2>

<p>Now, lets have a look in how MVC5 SignIn a user

``` cs AccountController.cs start:1 mark:5</p>

<pre><code>    private async Task SignInAsync(ApplicationUser user, bool isPersistent)
    {
        AuthenticationManager.SignOut(DefaultAuthenticationTypes.ExternalCookie);
        var identity = await UserManager.CreateIdentityAsync(user, DefaultAuthenticationTypes.ApplicationCookie);
        AuthenticationManager.SignIn(new AuthenticationProperties() { IsPersistent = isPersistent }, identity);
    }
</code></pre>

<p><code>``

A user is authenticated by calling</code>AuthenticationManager.SignIn`, to understand more details in it, we can have a look in the <a target="_blank" href="http://katanaproject.codeplex.com/SourceControl/latest#src/Microsoft.Owin/Security/AuthenticationManager.cs">Katana Project&rsquo;s AuthenticationManager</a>.</p>

<h2>Solution</h2>

<p>So, in order to <strong>SignIn</strong> a user, we just have to call the method <code>AuthenticationManager.SignIn</code>, which, request us to have a Claims base Identity implementation. By having a look in the <a target="_blank" href="http://katanaproject.codeplex.com">Katana Project</a>, we can easily create one for ourselves, below is an example of the rewrite of the <code>SignInAsync</code>:

``` cs AccountController.cs start:1 mark:4-7</p>

<pre><code>    private async Task SignInAsync(IUser user, bool isPersistent)
    {
        //AuthenticationManager.SignOut(DefaultAuthenticationTypes.ExternalCookie);
        var claimsIdentity = new ClaimsIdentity(
            new[] { new Claim(ClaimsIdentity.DefaultNameClaimType, user.UserName) },
            DefaultAuthenticationTypes.ApplicationCookie);
        AuthenticationManager.SignIn(new AuthenticationProperties() { IsPersistent = isPersistent } , claimsIdentity);
    }
</code></pre>

<p>```
</p>

<p>Now, let&rsquo;s run our application, and we will a user can SignIn using our own <code>Claims</code>.</p>

<h2>Exception: ClaimsIdentity was not present</h2>

<p>We can successfully signin by the example above, however, we will also find an exception being raised complaining:</p>

<blockquote><p>A claim of type &lsquo;<a href="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier">http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier</a>&rsquo; or &lsquo;<a href="http://schemas.microsoft.com/accesscontrolservice/2010/07/claims/identityprovider">http://schemas.microsoft.com/accesscontrolservice/2010/07/claims/identityprovider</a>&rsquo; was not present on the provided ClaimsIdentity.</p></blockquote>

<p>The reason of this error occurs is because we have now implemented our own claims for our user, and we therefore need to tell <code>AntiForgery</code> how to identify our user&rsquo;s uniqueless based on our claim. The solution is as easy as adding the following line in <code>Global.asax.cs</code>

``` cs Global.asax.cs start:15 mark:22</p>

<pre><code>    protected void Application_Start()
    {
        AreaRegistration.RegisterAllAreas();
        FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);
        RouteConfig.RegisterRoutes(RouteTable.Routes);
        BundleConfig.RegisterBundles(BundleTable.Bundles);

        AntiForgeryConfig.UniqueClaimTypeIdentifier = ClaimTypes.Name;
    }
</code></pre>

<p>```
</p>

<p>Note that I use <code>ClaimTypes.Name</code> because I have added the claims using <code>ClaimsIdentity.DefaultNameClaimType</code>, we can use a list of predefined claim types by the <a target="_blank" href="http://msdn.microsoft.com/en-us/library/system.security.claims.claimtypes(v=vs.110).aspx">ClaimTypes</a> class defined in .NET too.</p>

<p><span id="exception-error" style="display:none">A claim of type &lsquo;<a href="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier">http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier</a>&rsquo; or &lsquo;<a href="http://schemas.microsoft.com/accesscontrolservice/2010/07/claims/identityprovider">http://schemas.microsoft.com/accesscontrolservice/2010/07/claims/identityprovider</a>&rsquo; was not present on the provided ClaimsIdentity. To enable anti-forgery token support with claims-based authentication, please verify that the configured claims provider is providing both of these claims on the ClaimsIdentity instances it generates. If the configured claims provider instead uses a different claim type as a unique identifier, it can be configured by setting the static property AntiForgeryConfig.UniqueClaimTypeIdentifier.</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Email Templates service in your ASP.NET MVC projects using IoC]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/02/24/adding-email-templates-service-in-your-asp-dot-net-mvc-projects-using-ioc/"/>
    <updated>2014-02-24T17:18:57+11:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/02/24/adding-email-templates-service-in-your-asp-dot-net-mvc-projects-using-ioc</id>
    <content type="html"><![CDATA[<p>It looks obvious to give your web applications to send an email with some templates engine.
After some googling, I decided to use <a href="http://aboutcode.net/postal/" target="_blank">Postal</a> as the preferred service because:
1. It uses Razor engine for the template, which everyone is familar with
2. It is based on the .NET framework&rsquo;s built in SmptClient ( so you can just config it using web.config )
3. It is designed to be used in a dependency injection pattern (provide unit testing for your controllers or classes)</p>

<h2>Using the IEmailService</h2>

<p>With a decoupled design, it is possible you will seperate your logics include sending an email in your logic classes but not in your asp.net controller.
Therefore, an IEmailService that supports dependency injection is a better way to use than having an Email service just be used in a controller.
To apply Postal in your class, we can simply inject it&rsquo;s IEmailService to our business logic class.</p>

<p>
``` cs BusinessService.cs</p>

<pre><code>public class BusinessService : IBusinessService
{
    private readonly IEmailService _emailService;
    public BusinessService(IEmailService emailService)
    {
        this._emailService = emailService;
    }
}
</code></pre>

<p>```
</p>

<h3>And your controller</h3>

<p>
``` cs SomeController.cs</p>

<pre><code>public class SomeController : Controller
{
    private readonly IBusinessService _businessService;

    public SomeController(IBusinessService businessService)
    {
        this._businessService = businessService;
    }
</code></pre>

<p>```
</p>

<h3>Register the service using Autoface as our IoC</h3>

<p>
``` cs</p>

<pre><code>        builder.RegisterType&lt;EmailService&gt;().As&lt;IEmailService&gt;();
</code></pre>

<p>```
</p>

<p>Now you can create your email templates in your <code>Views\Emails</code> folder and send it inside your business logics class</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating custom Filter Attribute in Orchard]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/02/12/creating-custom-filter-attribute-in-orchard/"/>
    <updated>2014-02-12T17:14:23+11:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/02/12/creating-custom-filter-attribute-in-orchard</id>
    <content type="html"><![CDATA[<h2>Filter in Orchard</h2>

<p>When working in Orchard, it&rsquo;s always a good idea to look at the current codebase as an example.</p>

<p>The one I chose as a reference in creating my custom filter attribute is the <code>Theme</code> filter.</p>

<p>It is located in <code>$\Orchard\Themes\ThemeFilter.cs</code> inside the <code>Orchard.Framework</code> project.</p>

<p>You will notice that <code>ThemeFilter</code> is actually inherited from a class called <code>FilterProvider</code>.

``` cs ThemeFilter.cs start:1 mark:2
namespace Orchard.Themes {</p>

<pre><code>public class ThemeFilter : FilterProvider, IActionFilter, IResultFilter {
    public void OnActionExecuting(ActionExecutingContext filterContext) {
</code></pre>

<p>```
</p>

<p>Now lets have a look inside <code>FilterProvider</code>.

``` cs ThemeFilter.cs start:8 mark:14-21</p>

<pre><code>public abstract class FilterProvider : IFilterProvider {
    void IFilterProvider.AddFilters(FilterInfo filterInfo) {
        AddFilters(filterInfo);
    }

    protected virtual void AddFilters(FilterInfo filterInfo) {
        if (this is IAuthorizationFilter)
            filterInfo.AuthorizationFilters.Add(this as IAuthorizationFilter);
        if (this is IActionFilter)
            filterInfo.ActionFilters.Add(this as IActionFilter);
        if (this is IResultFilter)
            filterInfo.ResultFilters.Add(this as IResultFilter);
        if (this is IExceptionFilter)
            filterInfo.ExceptionFilters.Add(this as IExceptionFilter);
    }

}
</code></pre>

<p>```
</p>

<p>Bingo, it turns out that if you create a class to inherit <code>FilterProvider</code> and some <code>IActionFilter</code>, they will be automatically applied to your actions as <code>ActionFilter</code> already.</p>

<p>Note that Orchard is clever enough to help you to inject your dependencies using Autofac by constructor injection too.</p>

<h2>Attribute in Orchard</h2>

<!-- more -->


<p>As you can see, when you created your custom filter, it actually automatically applied to <strong>all</strong> your actions.</p>

<p>What happanes if you only want to apply your filter in certain actions using attribute?</p>

<p>Its easy, just check the <code>ThemeFilter</code> and <code>ThemeAttribute</code> as an example:</p>

<ol>
<li>create your own attribute</li>
<li>check whether the action contains this attribute inside your filter.</li>
<li>apply what you want if the attribute exists or do nothing if it&rsquo;s not.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET MVC how to handle unauthorized response in JSON for your API]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/02/11/asp-dot-net-mvc-how-to-handle-unauthorized-response-in-json-for-your-api/"/>
    <updated>2014-02-11T13:16:43+11:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/02/11/asp-dot-net-mvc-how-to-handle-unauthorized-response-in-json-for-your-api</id>
    <content type="html"><![CDATA[<p>Assuming you want to prepare some JSON API in your ASP.NET MVC with authorization.</p>

<p>To share the same authorization logics for our Controller Action, what we should probably do is to implement our own FilterAttributes.</p>

<p>It can be as simple as:

``` cs ApiAuthorizeAttribute.cs</p>

<pre><code>public class ApiAuthorizeAttribute : ActionFilterAttribute, IAuthorizationFilter 
{
    //Property Inject here!
    public IAuthTokenService AuthTokenService { get; set; }

    public ApiAuthorizeAttribute()
    {     
    }

    #region IAuthorizationFilter member
    public void OnActionExecuting(ActionExecutingContext filterContext)
    {
        bool authTokenValid = IsRequestTokenValid(filterContext);

        if (!authTokenValid)
        {
            filterContext.Result = new JsonResult
            {
                Data = new { Success = false, Data = "Unauthorized" },
                ContentEncoding = System.Text.Encoding.UTF8,
                ContentType = "application/json",
                JsonRequestBehavior = JsonRequestBehavior.AllowGet
            };
        }
    }

}
</code></pre>

<p><code>``

Note we are using property injection here for the</code>IAuthTokenService` here, check out <a href="https://code.google.com/p/autofac/wiki/MvcIntegration#Inject_Properties_Into_FilterAttributes" target="_blank" >Inject Properties Into FilterAttributes</a> for more information.</p>

<h2>HTTP status codes</h2>

<p>In order to add our HTTP status codes, we can simple add the following line:</p>

<!-- more -->


<p>
``` cs ApiAuthorizeAttribute.cs start:1 mark:1</p>

<pre><code>            filterContext.HttpContext.Response.StatusCode = 401;
            filterContext.Result = new JsonResult
            {
                Data = new { Success = false, Data = "Unauthorized" },
                ContentEncoding = System.Text.Encoding.UTF8,
                ContentType = "application/json",
                JsonRequestBehavior = JsonRequestBehavior.AllowGet
            };
</code></pre>

<p>```
</p>

<h2>Problem: The default ASP.NET forms authentication redirect behaviour</h2>

<p>The default ASP.NET forms authentication behaviour will convert HTTP 401 status codes to 302 in order to redirect to the login page.
This probably not we want here as we are expecting a JSON for our API result.</p>

<h2>Solution</h2>

<p>If you are using .Net 4.5, you can apply the new <a href="http://msdn.microsoft.com/en-us/library/system.web.httpresponse.suppressformsauthenticationredirect(v=vs.110).aspx" target="_blank">HttpResponse.SuppressFormsAuthenticationRedirect</a> property.</p>

<p>If you are using .Net 4.0 or lower version, it seems it cannot be done at the moment, but we may try to use different HTTP status code like <a href="http://en.wikipedia.org/wiki/HTTP_403" target="_blank">403</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Authentication API for mobile application using ASP.NET MVC]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/02/06/simple-authentication-api-for-mobile-application-using-asp-dot-net-mvc/"/>
    <updated>2014-02-06T17:22:34+11:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/02/06/simple-authentication-api-for-mobile-application-using-asp-dot-net-mvc</id>
    <content type="html"><![CDATA[<p>This is actually part of server-side implementaion for the previous post: <a href="/blog/2014/02/05/how-to-authenticate-from-a-mobile-application-to-an-existing-web-application/">How to authenticate from a mobile application to an existing web pplication</a>
We are going to create an ASP.NET MVC action as a JSON API to authenticate a mobile client.</p>

<h2>The Token Interface</h2>

<p>First, let&rsquo;s create a token service interface for our API Controller. We will be using dependency injection pattern.

``` cs IAuthTokenService.cs</p>

<pre><code>public interface IAuthTokenService
{
    /// &lt;summary&gt;
    /// Issue a token for a user
    /// &lt;/summary&gt;
    /// &lt;param name="username"&gt;&lt;/param&gt;
    /// &lt;returns&gt;tokenId&lt;/returns&gt;
    string IssuseToken(string username);

    /// &lt;summary&gt;
    /// Check if a token is valid
    /// &lt;/summary&gt;
    /// &lt;param name="username"&gt;&lt;/param&gt;
    /// &lt;param name="tokenId"&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    bool IsTokenValid(string username, string tokenId);

    /// &lt;summary&gt;
    /// Expire users' tokens (designed to be called when user changed their password)
    /// &lt;/summary&gt;
    /// &lt;param name="username"&gt;&lt;/param&gt;
    /// &lt;param name="tokensCreatedBefore"&gt;expire all tokens created before this time&lt;/param&gt;
    void ExpireUserTokens(string username, DateTime? tokensCreatedBefore);
}
</code></pre>

<p>```
</p>

<!-- more -->


<h2>The API Controller</h2>

<p>Our API controller can now use the token authentication service as simple as

``` cs SimpleApiController.cs</p>

<pre><code>public class SimpleApiController : Controller
{
    private readonly IMembershipService _membershipService;
    private readonly IAuthTokenService _tokenService;

    public SimpleApiController(IMembershipService membershipService, IAuthTokenService tokenService)
    {
        this._membershipService = membershipService;
        this._tokenService = tokenService;
    }

    [HttpPost]
    public JsonResult MobileAuthenticate(string email, string password)
    {
        bool valid = this._membershipService.ValidateUser(email, password);

        var result = new AuthTokenResult() {Success = false};

        if (valid)
        {
            var token = this._tokenService.IssuseToken(email);
            result.Success = true;
            result.TokenId = token;
        }

        return Json(result);
    }
}
</code></pre>

<p>```
</p>

<h2>Unit Test</h2>

<p>Now that we have our interface, and we have our controller.
Let&rsquo;s create an unit test first, yes, we don&rsquo;t actually need to implement our interface when we write our test.
We can actually assign someone to help us to implement the interface later.</p>

<p>Alright, below is one of our test. We will use <a target="_blank" href="https://github.com/Moq/moq4">Moq</a> to help us mock our interface.

``` cs SimpleApiControllerTest.cs</p>

<pre><code>[TestClass()]
public class SimpleApiControllerTest
{
    private readonly IMembershipService _membershipService;
    private readonly IAuthTokenService _tokenService;

    [TestMethod()]
    public void MobileAuthenticateSuccess()
    {
        var tokenId = "dummyToken";
        var email = "some@email.com";
        var password = "abcdef";

        var memberMock = new Mock&lt;IMembershipService&gt;();
        memberMock.Setup(m =&gt; m.ValidateUser(It.IsAny&lt;string&gt;(), It.IsAny&lt;string&gt;())).Returns(true);

        var tokenMock = new Mock&lt;IAuthTokenService&gt;();
        tokenMock.Setup(t =&gt; t.IssuseToken(It.IsAny&lt;string&gt;())).Returns(tokenId);

        var controller = new SimpleApiController(memberMock.Object, tokenMock.Object);
        var result = controller.MobileAuthenticate(email, password);

        var authResult = ((JsonResult)result).Data as AuthTokenResult;

        Assert.AreEqual(true, authResult.Success);
        Assert.AreEqual(tokenId, authResult.TokenId);
    }
}
</code></pre>

<p>```
</p>
]]></content>
  </entry>
  
</feed>
