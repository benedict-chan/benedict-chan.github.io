<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dependency injection | Benedict Chan]]></title>
  <link href="http://benedict-chan.github.io/blog/categories/dependency-injection/atom.xml" rel="self"/>
  <link href="http://benedict-chan.github.io/"/>
  <updated>2020-05-13T01:07:15+00:00</updated>
  <id>http://benedict-chan.github.io/</id>
  <author>
    <name><![CDATA[Benedict Chan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Resolving implementations at runtime using Autofac]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/08/13/resolving-implementations-at-runtime-in-autofac/"/>
    <updated>2014-08-13T10:02:01+00:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/08/13/resolving-implementations-at-runtime-in-autofac</id>
    <content type="html"><![CDATA[<p>There are lots of ways on resolving your services and implementations at runtime in Autofac. Following is a simple example to demonstrate how we can do it.</p>

<p>Assumng we have a simple interface <code>IDataService</code> that will provide us some data.</p>

<p>
``` cs IDataService.cs</p>

<pre><code>public interface IDataService
{
    string GetData();
}
</code></pre>

<p>```
</p>

<p>We are consuming this service and will return our users the data based on their <code>Role</code>, there are two roles in this example.
And we are providing different implementation for the <code>IDataService</code> for each role.</p>

<p>
``` cs</p>

<pre><code>public enum RoleName
{
    Premium,
    Normal
}

public class PremiumDataService : IDataService
{
    ....
}

public class NormalDataService : IDataService
{
    ....
}
</code></pre>

<p>```
</p>

<h2>Simple Solution using Func&lt;> as our factory in Autofac</h2>

<p>We will use a simple function <code>Func&lt;RoleName, IDataService&gt;</code> as our dependency in our <code>Controller</code>. It will act as our factory so that we can consume this factory to get our expected data.</p>

<p>
``` cs</p>

<pre><code>    private readonly Func&lt;RoleName, IDataService&gt; _dataServiceFactory;
    public HomeController(Func&lt;RoleName, IDataService&gt; dataServiceFactory)
    {
        this._dataServiceFactory = dataServiceFactory;
    }

    public ActionResult GetData()
    {
        ....

        var dataService = this._dataServiceFactory(roleType);
        var data = dataService.GetData();
        ....
    }
</code></pre>

<p>```
</p>

<!-- more -->


<h2>Autofac registration for Func&lt;> (First version)</h2>

<p>To config this <code>Func&lt;RoleName, IDataService&gt;</code> in Autofac, we can simple do this:</p>

<p>
``` cs</p>

<pre><code>        builder.Register&lt;Func&lt;RoleName, IDataService&gt;&gt;(c =&gt;
        {
            return (roleName) =&gt;
            {
                switch (roleName)
                {
                    case RoleName.Premium:
                        return new PremiumDataService();
                    case RoleName.Normal:
                        return new NormalDataService();
                    default:
                        throw new ArgumentException();
                }
            };
        });
</code></pre>

<p>```
</p>

<p>The above implementation is viable, however, notice that:</p>

<ol>
<li><p>We are using <code>new</code> in creating our services, this is not a best practice in Dependency Injection. Especially when our services may have it&rsquo;s own dependency.</p></li>
<li><p>We can use a more elegant way in Autfac to identify our services using <code>Keyed Registration</code></p></li>
</ol>


<h2>using Keyed Registration for our factory (Second version)</h2>

<p>Below is our second version for the registration of our services using <code>Keyed Registration</code> in Autofac.
Note that in this version, we are also registering our services into Autofac.
Therefore if our services have other dependencies, Autofac will also help us to resolve them automatically.</p>

<p>
``` cs</p>

<pre><code>        builder.RegisterType&lt;PremiumDataService&gt;()
            .As&lt;IDataService&gt;().Keyed&lt;IDataService&gt;(RoleName.Premium);

        builder.RegisterType&lt;NormalDataService&gt;()
            .As&lt;IDataService&gt;().Keyed&lt;IDataService&gt;(RoleName.Normal);

        builder.Register&lt;Func&lt;RoleName, IDataService&gt;&gt;(c =&gt;
        {
            var componentContext = c.Resolve&lt;IComponentContext&gt;();
            return (roleName) =&gt;
            {
                var dataService = componentContext.ResolveKeyed&lt;IDataService&gt;(roleName);
                return dataService;
            };
        });
</code></pre>

<p>```
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Email Templates service in your ASP.NET MVC projects using IoC]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/02/24/adding-email-templates-service-in-your-asp-dot-net-mvc-projects-using-ioc/"/>
    <updated>2014-02-24T06:18:57+00:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/02/24/adding-email-templates-service-in-your-asp-dot-net-mvc-projects-using-ioc</id>
    <content type="html"><![CDATA[<p>It looks obvious to give your web applications to send an email with some templates engine.
After some googling, I decided to use <a href="http://aboutcode.net/postal/" target="_blank">Postal</a> as the preferred service because:
1. It uses Razor engine for the template, which everyone is familar with
2. It is based on the .NET framework&rsquo;s built in SmptClient ( so you can just config it using web.config )
3. It is designed to be used in a dependency injection pattern (provide unit testing for your controllers or classes)</p>

<h2>Using the IEmailService</h2>

<p>With a decoupled design, it is possible you will seperate your logics include sending an email in your logic classes but not in your asp.net controller.
Therefore, an IEmailService that supports dependency injection is a better way to use than having an Email service just be used in a controller.
To apply Postal in your class, we can simply inject it&rsquo;s IEmailService to our business logic class.</p>

<p>
``` cs BusinessService.cs</p>

<pre><code>public class BusinessService : IBusinessService
{
    private readonly IEmailService _emailService;
    public BusinessService(IEmailService emailService)
    {
        this._emailService = emailService;
    }
}
</code></pre>

<p>```
</p>

<h3>And your controller</h3>

<p>
``` cs SomeController.cs</p>

<pre><code>public class SomeController : Controller
{
    private readonly IBusinessService _businessService;

    public SomeController(IBusinessService businessService)
    {
        this._businessService = businessService;
    }
</code></pre>

<p>```
</p>

<h3>Register the service using Autoface as our IoC</h3>

<p>
``` cs</p>

<pre><code>        builder.RegisterType&lt;EmailService&gt;().As&lt;IEmailService&gt;();
</code></pre>

<p>```
</p>

<p>Now you can create your email templates in your <code>Views\Emails</code> folder and send it inside your business logics class</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating custom Filter Attribute in Orchard]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/02/12/creating-custom-filter-attribute-in-orchard/"/>
    <updated>2014-02-12T06:14:23+00:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/02/12/creating-custom-filter-attribute-in-orchard</id>
    <content type="html"><![CDATA[<h2>Filter in Orchard</h2>

<p>When working in Orchard, it&rsquo;s always a good idea to look at the current codebase as an example.</p>

<p>The one I chose as a reference in creating my custom filter attribute is the <code>Theme</code> filter.</p>

<p>It is located in <code>$\Orchard\Themes\ThemeFilter.cs</code> inside the <code>Orchard.Framework</code> project.</p>

<p>You will notice that <code>ThemeFilter</code> is actually inherited from a class called <code>FilterProvider</code>.

``` cs ThemeFilter.cs start:1 mark:2
namespace Orchard.Themes {</p>

<pre><code>public class ThemeFilter : FilterProvider, IActionFilter, IResultFilter {
    public void OnActionExecuting(ActionExecutingContext filterContext) {
</code></pre>

<p>```
</p>

<p>Now lets have a look inside <code>FilterProvider</code>.

``` cs ThemeFilter.cs start:8 mark:14-21</p>

<pre><code>public abstract class FilterProvider : IFilterProvider {
    void IFilterProvider.AddFilters(FilterInfo filterInfo) {
        AddFilters(filterInfo);
    }

    protected virtual void AddFilters(FilterInfo filterInfo) {
        if (this is IAuthorizationFilter)
            filterInfo.AuthorizationFilters.Add(this as IAuthorizationFilter);
        if (this is IActionFilter)
            filterInfo.ActionFilters.Add(this as IActionFilter);
        if (this is IResultFilter)
            filterInfo.ResultFilters.Add(this as IResultFilter);
        if (this is IExceptionFilter)
            filterInfo.ExceptionFilters.Add(this as IExceptionFilter);
    }

}
</code></pre>

<p>```
</p>

<p>Bingo, it turns out that if you create a class to inherit <code>FilterProvider</code> and some <code>IActionFilter</code>, they will be automatically applied to your actions as <code>ActionFilter</code> already.</p>

<p>Note that Orchard is clever enough to help you to inject your dependencies using Autofac by constructor injection too.</p>

<h2>Attribute in Orchard</h2>

<!-- more -->


<p>As you can see, when you created your custom filter, it actually automatically applied to <strong>all</strong> your actions.</p>

<p>What happanes if you only want to apply your filter in certain actions using attribute?</p>

<p>Its easy, just check the <code>ThemeFilter</code> and <code>ThemeAttribute</code> as an example:</p>

<ol>
<li>create your own attribute</li>
<li>check whether the action contains this attribute inside your filter.</li>
<li>apply what you want if the attribute exists or do nothing if it&rsquo;s not.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET MVC how to handle unauthorized response in JSON for your API]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/02/11/asp-dot-net-mvc-how-to-handle-unauthorized-response-in-json-for-your-api/"/>
    <updated>2014-02-11T02:16:43+00:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/02/11/asp-dot-net-mvc-how-to-handle-unauthorized-response-in-json-for-your-api</id>
    <content type="html"><![CDATA[<p>Assuming you want to prepare some JSON API in your ASP.NET MVC with authorization.</p>

<p>To share the same authorization logics for our Controller Action, what we should probably do is to implement our own FilterAttributes.</p>

<p>It can be as simple as:

``` cs ApiAuthorizeAttribute.cs</p>

<pre><code>public class ApiAuthorizeAttribute : ActionFilterAttribute, IAuthorizationFilter 
{
    //Property Inject here!
    public IAuthTokenService AuthTokenService { get; set; }

    public ApiAuthorizeAttribute()
    {     
    }

    #region IAuthorizationFilter member
    public void OnActionExecuting(ActionExecutingContext filterContext)
    {
        bool authTokenValid = IsRequestTokenValid(filterContext);

        if (!authTokenValid)
        {
            filterContext.Result = new JsonResult
            {
                Data = new { Success = false, Data = "Unauthorized" },
                ContentEncoding = System.Text.Encoding.UTF8,
                ContentType = "application/json",
                JsonRequestBehavior = JsonRequestBehavior.AllowGet
            };
        }
    }

}
</code></pre>

<p><code>``

Note we are using property injection here for the</code>IAuthTokenService` here, check out <a href="https://code.google.com/p/autofac/wiki/MvcIntegration#Inject_Properties_Into_FilterAttributes" target="_blank" >Inject Properties Into FilterAttributes</a> for more information.</p>

<h2>HTTP status codes</h2>

<p>In order to add our HTTP status codes, we can simple add the following line:</p>

<!-- more -->


<p>
``` cs ApiAuthorizeAttribute.cs start:1 mark:1</p>

<pre><code>            filterContext.HttpContext.Response.StatusCode = 401;
            filterContext.Result = new JsonResult
            {
                Data = new { Success = false, Data = "Unauthorized" },
                ContentEncoding = System.Text.Encoding.UTF8,
                ContentType = "application/json",
                JsonRequestBehavior = JsonRequestBehavior.AllowGet
            };
</code></pre>

<p>```
</p>

<h2>Problem: The default ASP.NET forms authentication redirect behaviour</h2>

<p>The default ASP.NET forms authentication behaviour will convert HTTP 401 status codes to 302 in order to redirect to the login page.
This probably not we want here as we are expecting a JSON for our API result.</p>

<h2>Solution</h2>

<p>If you are using .Net 4.5, you can apply the new <a href="http://msdn.microsoft.com/en-us/library/system.web.httpresponse.suppressformsauthenticationredirect(v=vs.110).aspx" target="_blank">HttpResponse.SuppressFormsAuthenticationRedirect</a> property.</p>

<p>If you are using .Net 4.0 or lower version, it seems it cannot be done at the moment, but we may try to use different HTTP status code like <a href="http://en.wikipedia.org/wiki/HTTP_403" target="_blank">403</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Authentication API for mobile application using ASP.NET MVC]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/02/06/simple-authentication-api-for-mobile-application-using-asp-dot-net-mvc/"/>
    <updated>2014-02-06T06:22:34+00:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/02/06/simple-authentication-api-for-mobile-application-using-asp-dot-net-mvc</id>
    <content type="html"><![CDATA[<p>This is actually part of server-side implementaion for the previous post: <a href="/blog/2014/02/05/how-to-authenticate-from-a-mobile-application-to-an-existing-web-application/">How to authenticate from a mobile application to an existing web pplication</a>
We are going to create an ASP.NET MVC action as a JSON API to authenticate a mobile client.</p>

<h2>The Token Interface</h2>

<p>First, let&rsquo;s create a token service interface for our API Controller. We will be using dependency injection pattern.

``` cs IAuthTokenService.cs</p>

<pre><code>public interface IAuthTokenService
{
    /// &lt;summary&gt;
    /// Issue a token for a user
    /// &lt;/summary&gt;
    /// &lt;param name="username"&gt;&lt;/param&gt;
    /// &lt;returns&gt;tokenId&lt;/returns&gt;
    string IssuseToken(string username);

    /// &lt;summary&gt;
    /// Check if a token is valid
    /// &lt;/summary&gt;
    /// &lt;param name="username"&gt;&lt;/param&gt;
    /// &lt;param name="tokenId"&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    bool IsTokenValid(string username, string tokenId);

    /// &lt;summary&gt;
    /// Expire users' tokens (designed to be called when user changed their password)
    /// &lt;/summary&gt;
    /// &lt;param name="username"&gt;&lt;/param&gt;
    /// &lt;param name="tokensCreatedBefore"&gt;expire all tokens created before this time&lt;/param&gt;
    void ExpireUserTokens(string username, DateTime? tokensCreatedBefore);
}
</code></pre>

<p>```
</p>

<!-- more -->


<h2>The API Controller</h2>

<p>Our API controller can now use the token authentication service as simple as

``` cs SimpleApiController.cs</p>

<pre><code>public class SimpleApiController : Controller
{
    private readonly IMembershipService _membershipService;
    private readonly IAuthTokenService _tokenService;

    public SimpleApiController(IMembershipService membershipService, IAuthTokenService tokenService)
    {
        this._membershipService = membershipService;
        this._tokenService = tokenService;
    }

    [HttpPost]
    public JsonResult MobileAuthenticate(string email, string password)
    {
        bool valid = this._membershipService.ValidateUser(email, password);

        var result = new AuthTokenResult() {Success = false};

        if (valid)
        {
            var token = this._tokenService.IssuseToken(email);
            result.Success = true;
            result.TokenId = token;
        }

        return Json(result);
    }
}
</code></pre>

<p>```
</p>

<h2>Unit Test</h2>

<p>Now that we have our interface, and we have our controller.
Let&rsquo;s create an unit test first, yes, we don&rsquo;t actually need to implement our interface when we write our test.
We can actually assign someone to help us to implement the interface later.</p>

<p>Alright, below is one of our test. We will use <a target="_blank" href="https://github.com/Moq/moq4">Moq</a> to help us mock our interface.

``` cs SimpleApiControllerTest.cs</p>

<pre><code>[TestClass()]
public class SimpleApiControllerTest
{
    private readonly IMembershipService _membershipService;
    private readonly IAuthTokenService _tokenService;

    [TestMethod()]
    public void MobileAuthenticateSuccess()
    {
        var tokenId = "dummyToken";
        var email = "some@email.com";
        var password = "abcdef";

        var memberMock = new Mock&lt;IMembershipService&gt;();
        memberMock.Setup(m =&gt; m.ValidateUser(It.IsAny&lt;string&gt;(), It.IsAny&lt;string&gt;())).Returns(true);

        var tokenMock = new Mock&lt;IAuthTokenService&gt;();
        tokenMock.Setup(t =&gt; t.IssuseToken(It.IsAny&lt;string&gt;())).Returns(tokenId);

        var controller = new SimpleApiController(memberMock.Object, tokenMock.Object);
        var result = controller.MobileAuthenticate(email, password);

        var authResult = ((JsonResult)result).Data as AuthTokenResult;

        Assert.AreEqual(true, authResult.Success);
        Assert.AreEqual(tokenId, authResult.TokenId);
    }
}
</code></pre>

<p>```
</p>
]]></content>
  </entry>
  
</feed>
