<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Benedict Chan]]></title>
  <link href="http://benedict-chan.github.io/atom.xml" rel="self"/>
  <link href="http://benedict-chan.github.io/"/>
  <updated>2020-05-13T01:02:49+00:00</updated>
  <id>http://benedict-chan.github.io/</id>
  <author>
    <name><![CDATA[Benedict Chan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting up Ubuntu and Docker]]></title>
    <link href="http://benedict-chan.github.io/blog/2018/12/08/setting-up-ubuntu-and-docker/"/>
    <updated>2018-12-08T10:38:22+00:00</updated>
    <id>http://benedict-chan.github.io/blog/2018/12/08/setting-up-ubuntu-and-docker</id>
    <content type="html"><![CDATA[<p>This post just listed some commands I used for setting up a testing Ubuntu machine and Docker.</p>

<h3>Install xfce using apt</h3>

<pre><code>    sudo apt-get update
    sudo apt-get install xfce4
</code></pre>

<h3>Install xrdp using apt</h3>

<pre><code>    sudo apt-get install xrdp
    sudo systemctl enable xrdp
    echo xfce4-session &gt;~/.xsession
    sudo service xrdp restart

    # *Setting up a password for the rdp user*
    sudo passwd {username}
</code></pre>

<h3>Setting up Docker</h3>

<pre><code>    sudo apt-get install \
        apt-transport-https \
        ca-certificates \
        curl \
        software-properties-common

    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

    sudo add-apt-repository \
       "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
       $(lsb_release -cs) \
       stable"

    sudo apt-get update

    sudo apt-get install docker-ce
</code></pre>

<h3>Setting up Docker Compose</h3>

<pre><code>    sudo curl -L https://github.com/docker/compose/releases/download/1.23.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
</code></pre>

<h3>Common methods for SSH under Windows</h3>

<pre><code>    # *Generating SSH key with a specific location*
    ssh-keygen -t rsa -b 2048 -C "{comment/email}" -f {KeyLocation}

    # *Copying the SSH public key*
    clip &lt; {KeyLocation}.pub

    # *SSH using a key with a specific location*
    ssh username@hostip -i {KeyLocation}
</code></pre>

<h3>Setup Firefox</h3>

<pre><code>    sudo apt-get install firefox
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Docker to setup an environment for Octopress2]]></title>
    <link href="http://benedict-chan.github.io/blog/2018/10/18/use-docker-to-setup-an-environment-for-octopress2/"/>
    <updated>2018-10-18T10:23:39+00:00</updated>
    <id>http://benedict-chan.github.io/blog/2018/10/18/use-docker-to-setup-an-environment-for-octopress2</id>
    <content type="html"><![CDATA[<h2>Docker image for running Octopress 2</h2>

<p>Since this blog is made from Octopress 2 and it seems that Octopress has ended it&rsquo;s development after version 3.</p>

<p>In order to keep using it, it&rsquo;s better to create an development environment that I can keep on running it in the future.</p>

<p>The DockerFile for setting this environment is located <a href="https://github.com/benedict-chan/dockers/tree/master/octopress2">here</a>.</p>

<p>The Docker image is located in Docker Hub: <a href="https://hub.docker.com/r/benedictchan/octopress2/">https://hub.docker.com/r/benedictchan/octopress2/</a>.</p>

<h3>Running the environment</h3>

<p>To simply use this Docker image, you can just mount your Octopress repository&rsquo;s source branch to the container&rsquo;s <code>app</code> folder:</p>

<p><code>docker run -ti --rm -p 4000:4000 -v {source_path}:/app benedictchan/octopress2</code></p>

<!-- more -->


<h4>Create new post</h4>

<p><code>rake new_post["title"]</code></p>

<h4>Generate the blog</h4>

<p><code>rake generate</code></p>

<h4>Preview the blog</h4>

<p><code>rake preview</code></p>

<h4>Publish the blog</h4>

<p><code>rake deploy</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making a simple bar chart in d3 with animation]]></title>
    <link href="http://benedict-chan.github.io/blog/2015/02/18/making-a-simple-bar-chart-in-d3/"/>
    <updated>2015-02-18T03:07:38+00:00</updated>
    <id>http://benedict-chan.github.io/blog/2015/02/18/making-a-simple-bar-chart-in-d3</id>
    <content type="html"><![CDATA[<p>Although you can see lots of amazing charts in the home page of d3, d3 doesn&rsquo;t ship with any pre-built chart function.
In this post, I am going to draw a simple animated bar chart using d3.
The output will be:</p>

<iframe width="100%" height="300" src="http://benedict-chan.github.io//jsfiddle.net/benedict_chan/rn8rdvt8/7/embedded/result,js,html,css/" allowfullscreen="allowfullscreen" frameborder="0">
</iframe>




<!-- more -->


<p>Let&rsquo;s start by creating a simple bar chart, we will be creating it based on the following tutorial:
<a href="http://alignedleft.com/tutorials/d3/making-a-bar-chart" target="_blank"><a href="http://alignedleft.com/tutorials/d3/making-a-bar-chart">http://alignedleft.com/tutorials/d3/making-a-bar-chart</a></a></p>

<p>The tutorial explains clearly on to how to make a simple bar chart, following is a fiddle I created, with just some modification as I preferred:</p>

<iframe width="100%" height="300" src="http://benedict-chan.github.io//jsfiddle.net/benedict_chan/rn8rdvt8/1/embedded/js,result,html,css/" allowfullscreen="allowfullscreen" frameborder="0">
</iframe>


<p>Note what have be added:</p>

<figure class='code'><figcaption>barchart.cs</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='3' class='line-number marked start end'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number marked start'></div><div data-line='10' class='line-number marked end'></div></pre></td><td class='main  js'><pre><div class='line marked start end'><span class="kd">var</span> <span class="nx">heightRatio</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">dataSet</span><span class="p">)</span> <span class="o">/</span> <span class="nx">canvasHeight</span><span class="p">;</span>
</div><div class='line'> </div><div class='line'><span class="kd">var</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;#chart&quot;</span><span class="p">)</span>
</div><div class='line'>    <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;svg&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span> <span class="s2">&quot;100%&quot;</span><span class="p">)</span>
</div><div class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span> <span class="nx">canvasHeight</span> <span class="o">+</span> <span class="s2">&quot;px&quot;</span><span class="p">)</span>
</div><div class='line'> </div><div class='line marked start'><span class="kd">var</span> <span class="nx">rectWidth</span> <span class="o">=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;px&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="o">/</span> <span class="nx">dataSet</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</div><div class='line marked end'><span class="kd">var</span> <span class="nx">barPadding</span> <span class="o">=</span> <span class="nx">rectWidth</span> <span class="o">/</span> <span class="mi">5</span><span class="p">;</span>
</div></pre></td></tr></table></div></figure>


<p>As an example, I am actually making the <code>scales</code> myself here, in pratice we should use d3&rsquo;s pre-defined <a href="https://github.com/mbostock/d3/wiki/Quantitative-Scales" target="_blank">scales</a> to help us on this.</p>

<h2>Adding animation to the chart</h2>

<p>Too add animation in d3, we will use <code>transition</code>. To do this, it is as simple as to just assign an initial value to our chart attributes.
Then, we assign the final values (which is, what we already have) to the chart and applies transition.
The attributes that have to be animated are:
&ndash; <code>y</code> of the rectangles
&ndash; <code>height</code> of the rectangles</p>

<p>So, let&rsquo;s set an initial value to <code>0</code> of our <code>y</code> and <code>height</code>.
Therefore, we can keep our existing attributes of <code>x</code>, <code>width</code> and <code>fill</code>(color) of the chart. The code becomes:</p>

<figure class='code'><figcaption>bottomDownbarchart.cs</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='18' class='line-number'></div><div data-line='19' class='line-number'></div><div data-line='20' class='line-number marked start'></div><div data-line='21' class='line-number marked end'></div><div data-line='22' class='line-number'></div><div data-line='23' class='line-number'></div><div data-line='24' class='line-number'></div><div data-line='25' class='line-number'></div><div data-line='26' class='line-number marked start'></div><div data-line='27' class='line-number marked'></div><div data-line='28' class='line-number marked'></div><div data-line='29' class='line-number marked end'></div></pre></td><td class='main  js'><pre><div class='line'><span class="nx">canvas</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s1">&#39;rect&#39;</span><span class="p">)</span>
</div><div class='line'><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="k">return</span> <span class="nx">i</span><span class="o">*</span><span class="p">(</span> <span class="nx">rectWidth</span> <span class="p">);})</span>
</div><div class='line marked start'><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;y&#39;</span><span class="p">,</span>  <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="mi">0</span><span class="p">;})</span>
</div><div class='line marked end'><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="mi">0</span><span class="p">;})</span>
</div><div class='line'><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span> <span class="nx">rectWidth</span> <span class="o">-</span> <span class="nx">barPadding</span><span class="p">)</span>
</div><div class='line'><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span> <span class="k">return</span> <span class="s2">&quot;rgb(0, &quot;</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="mi">200</span> <span class="o">-</span> <span class="nx">d</span><span class="o">/</span><span class="nx">d3</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">dataSet</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span> <span class="p">)</span>   <span class="o">+</span><span class="s2">&quot;, 0)&quot;</span><span class="p">;</span> <span class="p">});</span>
</div><div class='line'> </div><div class='line'><span class="c1">//Animate the chart</span>
</div><div class='line marked start'><span class="nx">canvas</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s1">&#39;rect&#39;</span><span class="p">)</span>
</div><div class='line marked'><span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">duration</span><span class="p">(</span><span class="mi">3000</span><span class="p">)</span>
</div><div class='line marked'><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;y&#39;</span><span class="p">,</span>  <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="nx">canvasHeight</span> <span class="o">-</span> <span class="nx">d</span><span class="o">/</span><span class="nx">heightRatio</span><span class="p">;})</span>
</div><div class='line marked end'><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="nx">d</span><span class="o">/</span><span class="nx">heightRatio</span><span class="p">;});</span>
</div></pre></td></tr></table></div></figure>




<iframe width="100%" height="300" src="http://benedict-chan.github.io//jsfiddle.net/benedict_chan/rn8rdvt8/6/embedded/result,js,html,css/" allowfullscreen="allowfullscreen" frameborder="0">
</iframe>


<h3>Fixing the bottom down bar chart</h3>

<p>Notice the animation we have is a bottom down chart. So, why is it not bottom up?
<strong>It is because, the <code>y</code> start from <code>0</code> and increase downwardly.</strong>
Therefore when we set your <code>y</code> to start from <code>0</code>, it&rsquo;s actually moving the bar downwardly too.
So in order to fix this, we should on the other hand, set <code>y</code> to it&rsquo;s largest value, which is, the <code>cavans height</code>!</p>

<figure class='code'><figcaption>bottomDownbarchart.cs</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='18' class='line-number'></div><div data-line='19' class='line-number'></div><div data-line='20' class='line-number marked start end'></div><div data-line='21' class='line-number'></div><div data-line='22' class='line-number'></div><div data-line='23' class='line-number'></div><div data-line='24' class='line-number'></div><div data-line='25' class='line-number'></div><div data-line='26' class='line-number'></div><div data-line='27' class='line-number'></div><div data-line='28' class='line-number'></div><div data-line='29' class='line-number'></div></pre></td><td class='main  js'><pre><div class='line'><span class="nx">canvas</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s1">&#39;rect&#39;</span><span class="p">)</span>
</div><div class='line'><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="k">return</span> <span class="nx">i</span><span class="o">*</span><span class="p">(</span> <span class="nx">rectWidth</span> <span class="p">);})</span>
</div><div class='line marked start end'><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;y&#39;</span><span class="p">,</span>  <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="nx">canvasHeight</span><span class="p">;})</span>
</div><div class='line'><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="mi">0</span><span class="p">;})</span>
</div><div class='line'><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span> <span class="nx">rectWidth</span> <span class="o">-</span> <span class="nx">barPadding</span><span class="p">)</span>
</div><div class='line'><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;fill&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span> <span class="k">return</span> <span class="s2">&quot;rgb(0, &quot;</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="mi">200</span> <span class="o">-</span> <span class="nx">d</span><span class="o">/</span><span class="nx">d3</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">dataSet</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span> <span class="p">)</span>   <span class="o">+</span><span class="s2">&quot;, 0)&quot;</span><span class="p">;</span> <span class="p">});</span>
</div><div class='line'> </div><div class='line'><span class="c1">//Animate the chart</span>
</div><div class='line'><span class="nx">canvas</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s1">&#39;rect&#39;</span><span class="p">)</span>
</div><div class='line'><span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">duration</span><span class="p">(</span><span class="mi">3000</span><span class="p">)</span>
</div><div class='line'><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;y&#39;</span><span class="p">,</span>  <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="nx">canvasHeight</span> <span class="o">-</span> <span class="nx">d</span><span class="o">/</span><span class="nx">heightRatio</span><span class="p">;})</span>
</div><div class='line'><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;height&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="nx">d</span><span class="o">/</span><span class="nx">heightRatio</span><span class="p">;});</span>
</div></pre></td></tr></table></div></figure>




<iframe width="100%" height="300" src="http://benedict-chan.github.io//jsfiddle.net/benedict_chan/rn8rdvt8/7/embedded/result,js,html,css/" allowfullscreen="allowfullscreen" frameborder="0">
</iframe>


<p>Now we have a bar chart animating bottom up!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A taste in Pandas, ipython notebook]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/12/11/a-taste-in-pandas/"/>
    <updated>2014-12-11T00:33:44+00:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/12/11/a-taste-in-pandas</id>
    <content type="html"><![CDATA[<p>After setting up the python enviornment in the
<a href="http://benedict-chan.github.io/blog/2014/11/07/setup-python-environment-in-visual-studio/">previous post</a>. I am going to run some python scripts to test our enviornment.</p>

<h3>The exercise</h3>

<p>The example is actually some exercises provided by the following link:
<a href="http://nbviewer.ipython.org/urls/raw.github.com/nborwankar/LearnDataScience/master/notebooks/A2.%20Linear%20Regression%20-%20Data%20Exploration%20-%20Lending%20Club.ipynb" target="_blank">A2. Linear Regression &ndash; Data Exploration &ndash; Lending Club</a>, which is part of the page <a href="https://github.com/nborwankar/LearnDataScience" target="_blank">Learn Data Science</a>.</p>

<p>The exercise includes:
&ndash; Reading a sample csv data into <code>pandas</code>
&ndash; Removing % signs from rates
&ndash; Removing the word &ldquo;months&rdquo; from loan length.
&ndash; Managing outliers, remove such rows in this case</p>

<p>I have implemented them as an <code>ipython notebook</code> and it can be previewed <a href="http://nbviewer.ipython.org/github/benedict-chan/pytest/blob/master/LearnDataScience/a2-linear-regression.ipynb" target="_blank" >here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exporting data to CSV in SQL Server using bcp]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/11/17/exporting-data-to-csv-in-sql-server/"/>
    <updated>2014-11-17T05:13:22+00:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/11/17/exporting-data-to-csv-in-sql-server</id>
    <content type="html"><![CDATA[<p>There are several ways to export data in SQL Server, in this post, I am using <code>bcp</code> with <code>xp_cmdshell</code>.</p>

<p>We will first create a simple select statement to test whether we can export our data, then we will use a stored procedure to handle complex queries. Finally we will try to add variables to our script so that we can make this export script to be run in SQL Server Agent as a scheduled task.</p>

<h3>Test the export with a simple select statement</h3>

<figure class='code'><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  sql'><pre><div class='line'><span class="k">exec</span> <span class="n">master</span><span class="p">..</span><span class="n">xp_cmdshell</span> <span class="s1">&#39;bcp &quot;select * from DataSeries&quot; queryout &quot;C:\Export\dataseries.csv&quot; -c -t&quot;,&quot; -r&quot;\n&quot; -T&#39;</span>
</div></pre></td></tr></table></div></figure>


<p>However, you will receive an error of:
[SQL Server]Invalid object name &lsquo;Table&rsquo;.</p>

<p>So, in order to run this simple query, we actually need to tell SQL Server the full name of our table schema, which should be:</p>

<figure class='code'><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  sql'><pre><div class='line'><span class="k">exec</span> <span class="n">master</span><span class="p">..</span><span class="n">xp_cmdshell</span> <span class="s1">&#39;bcp &quot;select * from [db_name].[dbo].[DataSeries]&quot; queryout &quot;C:\Export\dataseries.csv&quot; -c -t&quot;,&quot; -r&quot;\n&quot; -T&#39;</span>
</div></pre></td></tr></table></div></figure>


<h3>Complex Query, use stored procedure</h3>

<!-- more -->


<p>For a complex query, we should store our query in a Stored Procedure, for example if we have a stored procedure name <code>ExportDataSeries</code> with two <code>DateTime</code> input parameters, we can change our script to:</p>

<figure class='code'><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  sql'><pre><div class='line'><span class="k">exec</span> <span class="n">master</span><span class="p">..</span><span class="n">xp_cmdshell</span> <span class="s1">&#39;bcp &quot;exec [db_name].[dbo].[ExportDataSeries] &#39;&#39;2014-11-17&#39;&#39;, &#39;&#39;2014-11-24&#39;&#39; &quot; queryout &quot;C:\Export\dataseries.csv&quot; -c -t&quot;,&quot; -r&quot;\n&quot; -T&#39;</span>
</div></pre></td></tr></table></div></figure>


<h3>Refactor and apply variables for the query</h3>

<p>Now that we have worked out our stored procedure, let&rsquo;s try to refactor our script by injecting some variables, such that we can use this in SQL Server Agent for repeated task. In this case, let&rsquo;s assume this is a daily schedule which will export data to a CSV file everyday.</p>

<p>The final script looks like this:</p>

<figure class='code'><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div><div data-line='16' class='line-number'></div><div data-line='17' class='line-number'></div><div data-line='18' class='line-number'></div><div data-line='19' class='line-number'></div><div data-line='20' class='line-number'></div><div data-line='21' class='line-number'></div><div data-line='22' class='line-number'></div><div data-line='23' class='line-number'></div><div data-line='24' class='line-number'></div><div data-line='25' class='line-number'></div><div data-line='26' class='line-number'></div></pre></td><td class='main  sql'><pre><div class='line'><span class="c1">-- DECLARE variables for the DateTime parameters</span>
</div><div class='line'><span class="k">DECLARE</span> <span class="o">@</span><span class="n">DayStart</span> <span class="n">DATETIME</span>
</div><div class='line'><span class="k">DECLARE</span> <span class="o">@</span><span class="n">DayEnd</span> <span class="n">DATETIME</span>
</div><div class='line'><span class="k">DECLARE</span> <span class="o">@</span><span class="n">DayStartArg</span> <span class="n">NVARCHAR</span><span class="p">(</span><span class="mi">50</span><span class="p">);</span>
</div><div class='line'><span class="k">DECLARE</span> <span class="o">@</span><span class="n">DayEndArg</span> <span class="n">NVARCHAR</span><span class="p">(</span><span class="mi">50</span><span class="p">);</span>
</div><div class='line'> </div><div class='line'><span class="k">SET</span> <span class="o">@</span><span class="n">DayStart</span> <span class="o">=</span>  <span class="k">CAST</span><span class="p">(</span><span class="k">CONVERT</span><span class="p">(</span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="n">GETDATE</span><span class="p">(),</span> <span class="mi">110</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39; 00:00:00&#39;</span> <span class="k">AS</span> <span class="n">DATETIME</span><span class="p">)</span>
</div><div class='line'><span class="k">SET</span> <span class="o">@</span><span class="n">DayEnd</span> <span class="o">=</span>  <span class="k">CAST</span><span class="p">(</span><span class="k">CONVERT</span><span class="p">(</span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="n">GETDATE</span><span class="p">(),</span> <span class="mi">110</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39; 23:59:59&#39;</span> <span class="k">AS</span> <span class="n">DATETIME</span><span class="p">)</span>
</div><div class='line'><span class="k">SET</span> <span class="o">@</span><span class="n">DayStartArg</span> <span class="o">=</span> <span class="k">CONVERT</span><span class="p">(</span><span class="n">NVARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="o">@</span><span class="n">DayStart</span><span class="p">,</span><span class="mi">126</span><span class="p">);</span>
</div><div class='line'><span class="k">SET</span> <span class="o">@</span><span class="n">DayEndArg</span> <span class="o">=</span> <span class="k">CONVERT</span><span class="p">(</span><span class="n">NVARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="o">@</span><span class="n">DayEnd</span><span class="p">,</span><span class="mi">126</span><span class="p">);</span>
</div><div class='line'> </div><div class='line'><span class="c1">-- DECLARE variables for export location</span>
</div><div class='line'><span class="k">DECLARE</span> <span class="o">@</span><span class="n">ExportFolderName</span> <span class="n">NVARCHAR</span><span class="p">(</span><span class="mi">90</span><span class="p">);</span>
</div><div class='line'><span class="k">DECLARE</span> <span class="o">@</span><span class="n">ExportFileName</span> <span class="n">NVARCHAR</span><span class="p">(</span><span class="mi">90</span><span class="p">);</span>
</div><div class='line'> </div><div class='line'><span class="k">SET</span> <span class="o">@</span><span class="n">ExportFolderName</span> <span class="o">=</span> <span class="s1">&#39;C:\Export\&#39;</span><span class="p">;</span>
</div><div class='line'><span class="k">SET</span> <span class="o">@</span><span class="n">ExportFileName</span> <span class="o">=</span> <span class="o">@</span><span class="n">ExportFolderName</span> <span class="o">+</span> <span class="s1">&#39;ExportDataSeries_&#39;</span> <span class="o">+</span> <span class="n">RTRIM</span><span class="p">(</span><span class="k">CONVERT</span><span class="p">(</span><span class="n">NVARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="o">@</span><span class="n">DayStart</span><span class="p">,</span><span class="mi">112</span><span class="p">))</span> <span class="o">+</span> <span class="s1">&#39;.csv&#39;</span><span class="p">;</span>
</div><div class='line'> </div><div class='line'><span class="c1">-- DECLARE variables for the execution scripts</span>
</div><div class='line'><span class="k">DECLARE</span> <span class="o">@</span><span class="n">SqlStatement</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">8000</span><span class="p">)</span>
</div><div class='line'><span class="k">DECLARE</span> <span class="o">@</span><span class="n">BcpStatement</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">8000</span><span class="p">)</span>
</div><div class='line'> </div><div class='line'><span class="k">SET</span> <span class="o">@</span><span class="n">SqlStatement</span> <span class="o">=</span> <span class="s1">&#39;exec [db_name].[dbo].[ExportDataSeries]  &#39;&#39;&#39;</span> <span class="o">+</span> <span class="o">@</span><span class="n">DayStartArg</span> <span class="o">+</span> <span class="s1">&#39;&#39;&#39;, &#39;&#39;&#39;</span> <span class="o">+</span> <span class="o">@</span><span class="n">DayEndArg</span> <span class="o">+</span> <span class="s1">&#39;&#39;&#39;&#39;</span>
</div><div class='line'><span class="k">SET</span> <span class="o">@</span><span class="n">BcpStatement</span> <span class="o">=</span> <span class="s1">&#39;bcp &quot;&#39;</span> <span class="o">+</span> <span class="o">@</span><span class="n">SqlStatement</span> <span class="o">+</span> <span class="s1">&#39;&quot; queryout &quot;&#39;</span> <span class="o">+</span> <span class="o">@</span><span class="n">ExportFileName</span> <span class="o">+</span> <span class="s1">&#39;&quot; -c -t&quot;,&quot; -r&quot;\n&quot; -T&#39;</span>
</div><div class='line'> </div><div class='line'><span class="k">exec</span> <span class="n">master</span><span class="p">..</span><span class="n">xp_cmdshell</span> <span class="o">@</span><span class="n">BcpStatement</span>
</div></pre></td></tr></table></div></figure>


<p>For your interest, variable <code>@BcpStatement</code> looks like this:</p>

<figure class='code'><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  sql'><pre><div class='line'><span class="n">bcp</span> <span class="ss">&quot;exec [db_name].[dbo].[ExportDataSeries]  &#39;2014-11-17T00:00:00&#39;, &#39;2014-11-17T23:59:59&#39;&quot;</span> <span class="n">queryout</span> <span class="ss">&quot;C:\Export\ExportDataSeries_20141117.csv&quot;</span> <span class="o">-</span><span class="k">c</span> <span class="o">-</span><span class="n">t</span><span class="ss">&quot;,&quot;</span> <span class="o">-</span><span class="n">r</span><span class="ss">&quot;\n&quot;</span> <span class="o">-</span><span class="n">T</span>
</div></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Python (Anaconda) Environment in Visual Studio]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/11/07/setup-python-environment-in-visual-studio/"/>
    <updated>2014-11-07T05:33:14+00:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/11/07/setup-python-environment-in-visual-studio</id>
    <content type="html"><![CDATA[<h2>Installing Python (Anaconda)</h2>

<p>In the old days, setting up an python environment with packages like NumPy SciPy in Windows may takes several hours. This may include building NumPy or SciPy yourself.</p>

<p>Now, to save our day, we can actually just install them easily by some special distributions like:</p>

<ul>
<li><a href="http://enthought.com/" target="_blank">EPD Free Enthought Python Distribution</a></li>
<li><a href="http://continuum.io/" target="_blank">Anaconda Python</a></li>
</ul>


<p>Here, I am going to install Anaconda, simply download the Windows installer and you are done.</p>

<h2>Setup Visual Studio as your Python IDE</h2>

<p>To use Visual Studio as your Python IDE, we can install the <a href="http://pytools.codeplex.com/" target="_blank" >Python Tools for Visual Studio (PTVS)</a>.</p>

<h2>Setup Python Environment &ndash; Anaconda</h2>

<p>Now that we have installed (PTVS), we have to tell (PTVS) where to find our Python distributions, in this case, the one that Anaconda installed.
We can configu it from:</p>

<p>From Visual Studio &ndash;> Options &ndash;> Python Tools &ndash;> Environment Options</p>

<p>We can setup our new Anaconda environment like this:</p>

<p><img class="center" src="http://benedict-chan.github.io/images/posts/2014-11-07-PythonEnvironmentOptions.jpg" title="" ></p>

<p>Once we have finished the setup, we can create a Python Project in Visual Studio, then try to run it our script using :</p>

<p>From Visual Studio &ndash;> Options &ndash;> Python Tools &ndash;> Execute Project in Python Interactive</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resolving implementations at runtime using Autofac]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/08/13/resolving-implementations-at-runtime-in-autofac/"/>
    <updated>2014-08-13T10:02:01+00:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/08/13/resolving-implementations-at-runtime-in-autofac</id>
    <content type="html"><![CDATA[<p>There are lots of ways on resolving your services and implementations at runtime in Autofac. Following is a simple example to demonstrate how we can do it.</p>

<p>Assumng we have a simple interface <code>IDataService</code> that will provide us some data.</p>

<figure class='code'><figcaption>IDataService.cs</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div></pre></td><td class='main  csharp'><pre><div class='line'>    <span class="k">public</span> <span class="k">interface</span> <span class="n">IDataService</span>
</div><div class='line'>    <span class="p">{</span>
</div><div class='line'>        <span class="kt">string</span> <span class="nf">GetData</span><span class="p">();</span>
</div><div class='line'>    <span class="p">}</span>
</div></pre></td></tr></table></div></figure>


<p>We are consuming this service and will return our users the data based on their <code>Role</code>, there are two roles in this example.
And we are providing different implementation for the <code>IDataService</code> for each role.</p>

<figure class='code'><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div></pre></td><td class='main  csharp'><pre><div class='line'>    <span class="k">public</span> <span class="k">enum</span> <span class="n">RoleName</span>
</div><div class='line'>    <span class="p">{</span>
</div><div class='line'>        <span class="n">Premium</span><span class="p">,</span>
</div><div class='line'>        <span class="n">Normal</span>
</div><div class='line'>    <span class="p">}</span>
</div><div class='line'> </div><div class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">PremiumDataService</span> <span class="p">:</span> <span class="n">IDataService</span>
</div><div class='line'>    <span class="p">{</span>
</div><div class='line'>        <span class="p">....</span>
</div><div class='line'>    <span class="p">}</span>
</div><div class='line'> </div><div class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">NormalDataService</span> <span class="p">:</span> <span class="n">IDataService</span>
</div><div class='line'>    <span class="p">{</span>
</div><div class='line'>        <span class="p">....</span>
</div><div class='line'>    <span class="p">}</span>
</div></pre></td></tr></table></div></figure>


<h2>Simple Solution using Func&lt;> as our factory in Autofac</h2>

<p>We will use a simple function <code>Func&lt;RoleName, IDataService&gt;</code> as our dependency in our <code>Controller</code>. It will act as our factory so that we can consume this factory to get our expected data.</p>

<figure class='code'><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div></pre></td><td class='main  csharp'><pre><div class='line'>        <span class="k">private</span> <span class="k">readonly</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">RoleName</span><span class="p">,</span> <span class="n">IDataService</span><span class="p">&gt;</span> <span class="n">_dataServiceFactory</span><span class="p">;</span>
</div><div class='line'>        <span class="k">public</span> <span class="nf">HomeController</span><span class="p">(</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">RoleName</span><span class="p">,</span> <span class="n">IDataService</span><span class="p">&gt;</span> <span class="n">dataServiceFactory</span><span class="p">)</span>
</div><div class='line'>        <span class="p">{</span>
</div><div class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">_dataServiceFactory</span> <span class="p">=</span> <span class="n">dataServiceFactory</span><span class="p">;</span>
</div><div class='line'>        <span class="p">}</span>
</div><div class='line'> </div><div class='line'>        <span class="k">public</span> <span class="n">ActionResult</span> <span class="nf">GetData</span><span class="p">()</span>
</div><div class='line'>        <span class="p">{</span>
</div><div class='line'>            <span class="p">....</span>
</div><div class='line'> </div><div class='line'>            <span class="kt">var</span> <span class="n">dataService</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_dataServiceFactory</span><span class="p">(</span><span class="n">roleType</span><span class="p">);</span>
</div><div class='line'>            <span class="kt">var</span> <span class="n">data</span> <span class="p">=</span> <span class="n">dataService</span><span class="p">.</span><span class="n">GetData</span><span class="p">();</span>
</div><div class='line'>            <span class="p">....</span>
</div><div class='line'>        <span class="p">}</span>
</div></pre></td></tr></table></div></figure>




<!-- more -->


<h2>Autofac registration for Func&lt;> (First version)</h2>

<p>To config this <code>Func&lt;RoleName, IDataService&gt;</code> in Autofac, we can simple do this:</p>

<figure class='code'><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div></pre></td><td class='main  csharp'><pre><div class='line'>            <span class="n">builder</span><span class="p">.</span><span class="n">Register</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">RoleName</span><span class="p">,</span> <span class="n">IDataService</span><span class="p">&gt;&gt;(</span><span class="n">c</span> <span class="p">=&gt;</span>
</div><div class='line'>            <span class="p">{</span>
</div><div class='line'>                <span class="k">return</span> <span class="p">(</span><span class="n">roleName</span><span class="p">)</span> <span class="p">=&gt;</span>
</div><div class='line'>                <span class="p">{</span>
</div><div class='line'>                    <span class="k">switch</span> <span class="p">(</span><span class="n">roleName</span><span class="p">)</span>
</div><div class='line'>                    <span class="p">{</span>
</div><div class='line'>                        <span class="k">case</span> <span class="n">RoleName</span><span class="p">.</span><span class="n">Premium</span><span class="p">:</span>
</div><div class='line'>                            <span class="k">return</span> <span class="k">new</span> <span class="nf">PremiumDataService</span><span class="p">();</span>
</div><div class='line'>                        <span class="k">case</span> <span class="n">RoleName</span><span class="p">.</span><span class="n">Normal</span><span class="p">:</span>
</div><div class='line'>                            <span class="k">return</span> <span class="k">new</span> <span class="nf">NormalDataService</span><span class="p">();</span>
</div><div class='line'>                        <span class="k">default</span><span class="p">:</span>
</div><div class='line'>                            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">();</span>
</div><div class='line'>                    <span class="p">}</span>
</div><div class='line'>                <span class="p">};</span>
</div><div class='line'>            <span class="p">});</span>
</div></pre></td></tr></table></div></figure>


<p>The above implementation is viable, however, notice that:</p>

<ol>
<li><p>We are using <code>new</code> in creating our services, this is not a best practice in Dependency Injection. Especially when our services may have it&rsquo;s own dependency.</p></li>
<li><p>We can use a more elegant way in Autfac to identify our services using <code>Keyed Registration</code></p></li>
</ol>


<h2>using Keyed Registration for our factory (Second version)</h2>

<p>Below is our second version for the registration of our services using <code>Keyed Registration</code> in Autofac.
Note that in this version, we are also registering our services into Autofac.
Therefore if our services have other dependencies, Autofac will also help us to resolve them automatically.</p>

<figure class='code'><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div></pre></td><td class='main  csharp'><pre><div class='line'>            <span class="n">builder</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">PremiumDataService</span><span class="p">&gt;()</span>
</div><div class='line'>                <span class="p">.</span><span class="n">As</span><span class="p">&lt;</span><span class="n">IDataService</span><span class="p">&gt;().</span><span class="n">Keyed</span><span class="p">&lt;</span><span class="n">IDataService</span><span class="p">&gt;(</span><span class="n">RoleName</span><span class="p">.</span><span class="n">Premium</span><span class="p">);</span>
</div><div class='line'> </div><div class='line'>            <span class="n">builder</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">NormalDataService</span><span class="p">&gt;()</span>
</div><div class='line'>                <span class="p">.</span><span class="n">As</span><span class="p">&lt;</span><span class="n">IDataService</span><span class="p">&gt;().</span><span class="n">Keyed</span><span class="p">&lt;</span><span class="n">IDataService</span><span class="p">&gt;(</span><span class="n">RoleName</span><span class="p">.</span><span class="n">Normal</span><span class="p">);</span>
</div><div class='line'> </div><div class='line'>            <span class="n">builder</span><span class="p">.</span><span class="n">Register</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">RoleName</span><span class="p">,</span> <span class="n">IDataService</span><span class="p">&gt;&gt;(</span><span class="n">c</span> <span class="p">=&gt;</span>
</div><div class='line'>            <span class="p">{</span>
</div><div class='line'>                <span class="kt">var</span> <span class="n">componentContext</span> <span class="p">=</span> <span class="n">c</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">IComponentContext</span><span class="p">&gt;();</span>
</div><div class='line'>                <span class="k">return</span> <span class="p">(</span><span class="n">roleName</span><span class="p">)</span> <span class="p">=&gt;</span>
</div><div class='line'>                <span class="p">{</span>
</div><div class='line'>                    <span class="kt">var</span> <span class="n">dataService</span> <span class="p">=</span> <span class="n">componentContext</span><span class="p">.</span><span class="n">ResolveKeyed</span><span class="p">&lt;</span><span class="n">IDataService</span><span class="p">&gt;(</span><span class="n">roleName</span><span class="p">);</span>
</div><div class='line'>                    <span class="k">return</span> <span class="n">dataService</span><span class="p">;</span>
</div><div class='line'>                <span class="p">};</span>
</div><div class='line'>            <span class="p">});</span>
</div></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authentication logics from ASP.NET MVC 4 to 5]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/03/28/authentication-logics-from-asp-dot-net-mvc-4-to-5/"/>
    <updated>2014-03-28T05:14:24+00:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/03/28/authentication-logics-from-asp-dot-net-mvc-4-to-5</id>
    <content type="html"><![CDATA[<h2>OWIN</h2>

<p>To allow security sharing by other components that can be hosted on <a href="http://owin.org/" target="_blank">OWIN</a>.
<strong>ASP.NET MVC 5</strong>  has applied a new security feature based on the <strong>OWIN</strong> authentication middleware.</p>

<p>For more information, please click <a href="http://blogs.msdn.com/b/webdev/archive/2013/07/03/understanding-owin-forms-authentication-in-mvc-5.aspx" target="_blank">here</a>.</p>

<p>To start, let&rsquo;s create a new project based on Visual Studio 2013&rsquo;s  template: <strong>Individual User Accounts</strong>.</p>

<h2>MVC5 Template: Individual User Accounts</h2>

<p>Have a look in the <code>web.config</code> of this newly created project. We will find that <code>FormsAuthenticationModule</code> is removed.</p>

<figure class='code'><figcaption>web.config </figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div></pre></td><td class='main  csharp'><pre><div class='line'><span class="p">&lt;</span><span class="n">system</span><span class="p">.</span><span class="n">webServer</span><span class="p">&gt;</span>
</div><div class='line'>    <span class="p">&lt;</span><span class="n">modules</span><span class="p">&gt;</span>
</div><div class='line'>        <span class="p">&lt;</span><span class="k">remove</span> <span class="n">name</span><span class="p">=</span><span class="s">&quot;FormsAuthenticationModule&quot;</span> <span class="p">/&gt;</span>
</div><div class='line'>    <span class="p">&lt;/</span><span class="n">modules</span><span class="p">&gt;</span>
</div><div class='line'><span class="p">&lt;/</span><span class="n">system</span><span class="p">.</span><span class="n">webServer</span><span class="p">&gt;</span>
</div></pre></td></tr></table></div></figure>


<p>Now also have a look in what&rsquo;s the new logic is added for supporting <strong>OWIN</strong>.</p>

<figure class='code'><figcaption>\app_start\startup.auth.cs</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number marked start'></div><div data-line='14' class='line-number marked'></div><div data-line='15' class='line-number marked'></div><div data-line='16' class='line-number marked'></div><div data-line='17' class='line-number marked end'></div><div data-line='18' class='line-number'></div><div data-line='19' class='line-number marked start end'></div></pre></td><td class='main  csharp'><pre><div class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureAuth</span><span class="p">(</span><span class="n">IAppBuilder</span> <span class="n">app</span><span class="p">)</span>
</div><div class='line'>    <span class="p">{</span>
</div><div class='line'>        <span class="c1">// Enable the application to use a cookie to store information for the signed in user</span>
</div><div class='line marked start'>        <span class="n">app</span><span class="p">.</span><span class="n">UseCookieAuthentication</span><span class="p">(</span><span class="k">new</span> <span class="n">CookieAuthenticationOptions</span>
</div><div class='line marked'>        <span class="p">{</span>
</div><div class='line marked'>            <span class="n">AuthenticationType</span> <span class="p">=</span> <span class="n">DefaultAuthenticationTypes</span><span class="p">.</span><span class="n">ApplicationCookie</span><span class="p">,</span>
</div><div class='line marked'>            <span class="n">LoginPath</span> <span class="p">=</span> <span class="k">new</span> <span class="n">PathString</span><span class="p">(</span><span class="s">&quot;/Account/Login&quot;</span><span class="p">)</span>
</div><div class='line marked end'>        <span class="p">});</span>
</div><div class='line'>        <span class="c1">// Use a cookie to temporarily store information about a user logging in with a third party login provider</span>
</div><div class='line marked start end'>        <span class="n">app</span><span class="p">.</span><span class="n">UseExternalSignInCookie</span><span class="p">(</span><span class="n">DefaultAuthenticationTypes</span><span class="p">.</span><span class="n">ExternalCookie</span><span class="p">);</span>
</div></pre></td></tr></table></div></figure>


<p>It looks like the template offers a <code>Cookie</code> authentication as default, does it work if we applies our <strong>ASP.NET MVC 4</strong>&rsquo;s <code>FormsAuthenticationTicket</code> to it?</p>

<!-- more -->


<h2>FormsAuthenticationTicket in MVC4</h2>

<p>We normally authenticate users in the following way in MVC4</p>

<figure class='code'><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div></pre></td><td class='main  csharp'><pre><div class='line'>            <span class="kt">var</span> <span class="n">ticket</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FormsAuthenticationTicket</span><span class="p">(..);</span>
</div><div class='line'>            <span class="kt">var</span> <span class="n">encryptedTicket</span> <span class="p">=</span> <span class="n">FormsAuthentication</span><span class="p">.</span><span class="n">Encrypt</span><span class="p">(</span><span class="n">ticket</span><span class="p">);</span>
</div><div class='line'>            <span class="kt">var</span> <span class="n">cookie</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HttpCookie</span><span class="p">(</span><span class="n">FormsAuthentication</span><span class="p">.</span><span class="n">FormsCookieName</span><span class="p">,</span> <span class="n">encryptedTicket</span><span class="p">)</span>
</div><div class='line'>            <span class="p">{</span>
</div><div class='line'>                <span class="n">HttpOnly</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span> <span class="n">Path</span> <span class="p">=</span> <span class="n">FormsAuthentication</span><span class="p">.</span><span class="n">FormsCookiePath</span>
</div><div class='line'>            <span class="p">};</span>
</div><div class='line'>            <span class="n">Response</span><span class="p">.</span><span class="n">Cookies</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">cookie</span><span class="p">);</span>
</div></pre></td></tr></table></div></figure>


<p>Now, if we apply this logic in our <strong>MVC5</strong> application, we will find that we do have added our authentication cookie, however, as <strong>MVC5</strong> follows the OWIN middleware, it has no way to understand our user is authenticated or not in <code>Request.IsAuthenticated</code>.</p>

<h2>AuthenticationManager in MVC5</h2>

<p>Now, lets have a look in how MVC5 SignIn a user</p>

<figure class='code'><figcaption>AccountController.cs</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number marked start end'></div><div data-line='6' class='line-number'></div></pre></td><td class='main  csharp'><pre><div class='line'>        <span class="k">private</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">SignInAsync</span><span class="p">(</span><span class="n">ApplicationUser</span> <span class="n">user</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isPersistent</span><span class="p">)</span>
</div><div class='line'>        <span class="p">{</span>
</div><div class='line'>            <span class="n">AuthenticationManager</span><span class="p">.</span><span class="n">SignOut</span><span class="p">(</span><span class="n">DefaultAuthenticationTypes</span><span class="p">.</span><span class="n">ExternalCookie</span><span class="p">);</span>
</div><div class='line'>            <span class="kt">var</span> <span class="n">identity</span> <span class="p">=</span> <span class="k">await</span> <span class="n">UserManager</span><span class="p">.</span><span class="n">CreateIdentityAsync</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">DefaultAuthenticationTypes</span><span class="p">.</span><span class="n">ApplicationCookie</span><span class="p">);</span>
</div><div class='line marked start end'>            <span class="n">AuthenticationManager</span><span class="p">.</span><span class="n">SignIn</span><span class="p">(</span><span class="k">new</span> <span class="n">AuthenticationProperties</span><span class="p">()</span> <span class="p">{</span> <span class="n">IsPersistent</span> <span class="p">=</span> <span class="n">isPersistent</span> <span class="p">},</span> <span class="n">identity</span><span class="p">);</span>
</div><div class='line'>        <span class="p">}</span>
</div></pre></td></tr></table></div></figure>


<p>A user is authenticated by calling <code>AuthenticationManager.SignIn</code>, to understand more details in it, we can have a look in the <a target="_blank" href="http://katanaproject.codeplex.com/SourceControl/latest#src/Microsoft.Owin/Security/AuthenticationManager.cs">Katana Project&rsquo;s AuthenticationManager</a>.</p>

<h2>Solution</h2>

<p>So, in order to <strong>SignIn</strong> a user, we just have to call the method <code>AuthenticationManager.SignIn</code>, which, request us to have a Claims base Identity implementation. By having a look in the <a target="_blank" href="http://katanaproject.codeplex.com">Katana Project</a>, we can easily create one for ourselves, below is an example of the rewrite of the <code>SignInAsync</code>:</p>

<figure class='code'><figcaption>AccountController.cs</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number marked start'></div><div data-line='5' class='line-number marked'></div><div data-line='6' class='line-number marked'></div><div data-line='7' class='line-number marked end'></div><div data-line='8' class='line-number'></div></pre></td><td class='main  csharp'><pre><div class='line'>        <span class="k">private</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">SignInAsync</span><span class="p">(</span><span class="n">IUser</span> <span class="n">user</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isPersistent</span><span class="p">)</span>
</div><div class='line'>        <span class="p">{</span>
</div><div class='line'>            <span class="c1">//AuthenticationManager.SignOut(DefaultAuthenticationTypes.ExternalCookie);</span>
</div><div class='line marked start'>            <span class="kt">var</span> <span class="n">claimsIdentity</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ClaimsIdentity</span><span class="p">(</span>
</div><div class='line marked'>                <span class="k">new</span><span class="p">[]</span> <span class="p">{</span> <span class="k">new</span> <span class="n">Claim</span><span class="p">(</span><span class="n">ClaimsIdentity</span><span class="p">.</span><span class="n">DefaultNameClaimType</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">UserName</span><span class="p">)</span> <span class="p">},</span>
</div><div class='line marked'>                <span class="n">DefaultAuthenticationTypes</span><span class="p">.</span><span class="n">ApplicationCookie</span><span class="p">);</span>
</div><div class='line marked end'>            <span class="n">AuthenticationManager</span><span class="p">.</span><span class="n">SignIn</span><span class="p">(</span><span class="k">new</span> <span class="n">AuthenticationProperties</span><span class="p">()</span> <span class="p">{</span> <span class="n">IsPersistent</span> <span class="p">=</span> <span class="n">isPersistent</span> <span class="p">}</span> <span class="p">,</span> <span class="n">claimsIdentity</span><span class="p">);</span>
</div><div class='line'>        <span class="p">}</span>
</div></pre></td></tr></table></div></figure>


<p>Now, let&rsquo;s run our application, and we will a user can SignIn using our own <code>Claims</code>.</p>

<h2>Exception: ClaimsIdentity was not present</h2>

<p>We can successfully signin by the example above, however, we will also find an exception being raised complaining:</p>

<blockquote><p>A claim of type &lsquo;<a href="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier">http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier</a>&rsquo; or &lsquo;<a href="http://schemas.microsoft.com/accesscontrolservice/2010/07/claims/identityprovider">http://schemas.microsoft.com/accesscontrolservice/2010/07/claims/identityprovider</a>&rsquo; was not present on the provided ClaimsIdentity.</p></blockquote>

<p>The reason of this error occurs is because we have now implemented our own claims for our user, and we therefore need to tell <code>AntiForgery</code> how to identify our user&rsquo;s uniqueless based on our claim. The solution is as easy as adding the following line in <code>Global.asax.cs</code></p>

<figure class='code'><figcaption>Global.asax.cs</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='15' class='line-number'></div><div data-line='16' class='line-number'></div><div data-line='17' class='line-number'></div><div data-line='18' class='line-number'></div><div data-line='19' class='line-number'></div><div data-line='20' class='line-number'></div><div data-line='21' class='line-number'></div><div data-line='22' class='line-number marked start end'></div><div data-line='23' class='line-number'></div></pre></td><td class='main  csharp'><pre><div class='line'>        <span class="k">protected</span> <span class="k">void</span> <span class="nf">Application_Start</span><span class="p">()</span>
</div><div class='line'>        <span class="p">{</span>
</div><div class='line'>            <span class="n">AreaRegistration</span><span class="p">.</span><span class="n">RegisterAllAreas</span><span class="p">();</span>
</div><div class='line'>            <span class="n">FilterConfig</span><span class="p">.</span><span class="n">RegisterGlobalFilters</span><span class="p">(</span><span class="n">GlobalFilters</span><span class="p">.</span><span class="n">Filters</span><span class="p">);</span>
</div><div class='line'>            <span class="n">RouteConfig</span><span class="p">.</span><span class="n">RegisterRoutes</span><span class="p">(</span><span class="n">RouteTable</span><span class="p">.</span><span class="n">Routes</span><span class="p">);</span>
</div><div class='line'>            <span class="n">BundleConfig</span><span class="p">.</span><span class="n">RegisterBundles</span><span class="p">(</span><span class="n">BundleTable</span><span class="p">.</span><span class="n">Bundles</span><span class="p">);</span>
</div><div class='line'> </div><div class='line marked start end'>            <span class="n">AntiForgeryConfig</span><span class="p">.</span><span class="n">UniqueClaimTypeIdentifier</span> <span class="p">=</span> <span class="n">ClaimTypes</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span>
</div><div class='line'>        <span class="p">}</span>
</div></pre></td></tr></table></div></figure>


<p>Note that I use <code>ClaimTypes.Name</code> because I have added the claims using <code>ClaimsIdentity.DefaultNameClaimType</code>, we can use a list of predefined claim types by the <a target="_blank" href="http://msdn.microsoft.com/en-us/library/system.security.claims.claimtypes(v=vs.110).aspx">ClaimTypes</a> class defined in .NET too.</p>

<p><span id="exception-error" style="display:none">A claim of type &lsquo;<a href="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier">http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier</a>&rsquo; or &lsquo;<a href="http://schemas.microsoft.com/accesscontrolservice/2010/07/claims/identityprovider">http://schemas.microsoft.com/accesscontrolservice/2010/07/claims/identityprovider</a>&rsquo; was not present on the provided ClaimsIdentity. To enable anti-forgery token support with claims-based authentication, please verify that the configured claims provider is providing both of these claims on the ClaimsIdentity instances it generates. If the configured claims provider instead uses a different claim type as a unique identifier, it can be configured by setting the static property AntiForgeryConfig.UniqueClaimTypeIdentifier.</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Email Templates service in your ASP.NET MVC projects using IoC]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/02/24/adding-email-templates-service-in-your-asp-dot-net-mvc-projects-using-ioc/"/>
    <updated>2014-02-24T06:18:57+00:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/02/24/adding-email-templates-service-in-your-asp-dot-net-mvc-projects-using-ioc</id>
    <content type="html"><![CDATA[<p>It looks obvious to give your web applications to send an email with some templates engine.
After some googling, I decided to use <a href="http://aboutcode.net/postal/" target="_blank">Postal</a> as the preferred service because:
1. It uses Razor engine for the template, which everyone is familar with
2. It is based on the .NET framework&rsquo;s built in SmptClient ( so you can just config it using web.config )
3. It is designed to be used in a dependency injection pattern (provide unit testing for your controllers or classes)</p>

<h2>Using the IEmailService</h2>

<p>With a decoupled design, it is possible you will seperate your logics include sending an email in your logic classes but not in your asp.net controller.
Therefore, an IEmailService that supports dependency injection is a better way to use than having an Email service just be used in a controller.
To apply Postal in your class, we can simply inject it&rsquo;s IEmailService to our business logic class.</p>

<figure class='code'><figcaption>BusinessService.cs</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div></pre></td><td class='main  csharp'><pre><div class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">BusinessService</span> <span class="p">:</span> <span class="n">IBusinessService</span>
</div><div class='line'>    <span class="p">{</span>
</div><div class='line'>        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IEmailService</span> <span class="n">_emailService</span><span class="p">;</span>
</div><div class='line'>        <span class="k">public</span> <span class="nf">BusinessService</span><span class="p">(</span><span class="n">IEmailService</span> <span class="n">emailService</span><span class="p">)</span>
</div><div class='line'>        <span class="p">{</span>
</div><div class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">_emailService</span> <span class="p">=</span> <span class="n">emailService</span><span class="p">;</span>
</div><div class='line'>        <span class="p">}</span>
</div><div class='line'>    <span class="p">}</span>
</div></pre></td></tr></table></div></figure>


<h3>And your controller</h3>

<figure class='code'><figcaption>SomeController.cs</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div></pre></td><td class='main  csharp'><pre><div class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">SomeController</span> <span class="p">:</span> <span class="n">Controller</span>
</div><div class='line'>    <span class="p">{</span>
</div><div class='line'>        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IBusinessService</span> <span class="n">_businessService</span><span class="p">;</span>
</div><div class='line'> </div><div class='line'>        <span class="k">public</span> <span class="nf">SomeController</span><span class="p">(</span><span class="n">IBusinessService</span> <span class="n">businessService</span><span class="p">)</span>
</div><div class='line'>        <span class="p">{</span>
</div><div class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">_businessService</span> <span class="p">=</span> <span class="n">businessService</span><span class="p">;</span>
</div><div class='line'>        <span class="p">}</span>
</div></pre></td></tr></table></div></figure>


<h3>Register the service using Autoface as our IoC</h3>

<figure class='code'><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  csharp'><pre><div class='line'>            <span class="n">builder</span><span class="p">.</span><span class="n">RegisterType</span><span class="p">&lt;</span><span class="n">EmailService</span><span class="p">&gt;().</span><span class="n">As</span><span class="p">&lt;</span><span class="n">IEmailService</span><span class="p">&gt;();</span>
</div></pre></td></tr></table></div></figure>


<p>Now you can create your email templates in your <code>Views\Emails</code> folder and send it inside your business logics class</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating custom Filter Attribute in Orchard]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/02/12/creating-custom-filter-attribute-in-orchard/"/>
    <updated>2014-02-12T06:14:23+00:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/02/12/creating-custom-filter-attribute-in-orchard</id>
    <content type="html"><![CDATA[<h2>Filter in Orchard</h2>

<p>When working in Orchard, it&rsquo;s always a good idea to look at the current codebase as an example.</p>

<p>The one I chose as a reference in creating my custom filter attribute is the <code>Theme</code> filter.</p>

<p>It is located in <code>$\Orchard\Themes\ThemeFilter.cs</code> inside the <code>Orchard.Framework</code> project.</p>

<p>You will notice that <code>ThemeFilter</code> is actually inherited from a class called <code>FilterProvider</code>.</p>

<figure class='code'><figcaption>ThemeFilter.cs</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number marked start end'></div><div data-line='3' class='line-number'></div></pre></td><td class='main  csharp'><pre><div class='line'><span class="k">namespace</span> <span class="nn">Orchard.Themes</span> <span class="p">{</span>
</div><div class='line marked start end'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">ThemeFilter</span> <span class="p">:</span> <span class="n">FilterProvider</span><span class="p">,</span> <span class="n">IActionFilter</span><span class="p">,</span> <span class="n">IResultFilter</span> <span class="p">{</span>
</div><div class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">OnActionExecuting</span><span class="p">(</span><span class="n">ActionExecutingContext</span> <span class="n">filterContext</span><span class="p">)</span> <span class="p">{</span>
</div></pre></td></tr></table></div></figure>


<p>Now lets have a look inside <code>FilterProvider</code>.</p>

<figure class='code'><figcaption>ThemeFilter.cs</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number marked start'></div><div data-line='15' class='line-number marked'></div><div data-line='16' class='line-number marked'></div><div data-line='17' class='line-number marked'></div><div data-line='18' class='line-number marked'></div><div data-line='19' class='line-number marked'></div><div data-line='20' class='line-number marked'></div><div data-line='21' class='line-number marked end'></div><div data-line='22' class='line-number'></div><div data-line='23' class='line-number'></div><div data-line='24' class='line-number'></div></pre></td><td class='main  csharp'><pre><div class='line'>    <span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">FilterProvider</span> <span class="p">:</span> <span class="n">IFilterProvider</span> <span class="p">{</span>
</div><div class='line'>        <span class="k">void</span> <span class="n">IFilterProvider</span><span class="p">.</span><span class="n">AddFilters</span><span class="p">(</span><span class="n">FilterInfo</span> <span class="n">filterInfo</span><span class="p">)</span> <span class="p">{</span>
</div><div class='line'>            <span class="n">AddFilters</span><span class="p">(</span><span class="n">filterInfo</span><span class="p">);</span>
</div><div class='line'>        <span class="p">}</span>
</div><div class='line'> </div><div class='line'>        <span class="k">protected</span> <span class="k">virtual</span> <span class="k">void</span> <span class="nf">AddFilters</span><span class="p">(</span><span class="n">FilterInfo</span> <span class="n">filterInfo</span><span class="p">)</span> <span class="p">{</span>
</div><div class='line marked start'>            <span class="k">if</span> <span class="p">(</span><span class="k">this</span> <span class="k">is</span> <span class="n">IAuthorizationFilter</span><span class="p">)</span>
</div><div class='line marked'>                <span class="n">filterInfo</span><span class="p">.</span><span class="n">AuthorizationFilters</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">this</span> <span class="k">as</span> <span class="n">IAuthorizationFilter</span><span class="p">);</span>
</div><div class='line marked'>            <span class="k">if</span> <span class="p">(</span><span class="k">this</span> <span class="k">is</span> <span class="n">IActionFilter</span><span class="p">)</span>
</div><div class='line marked'>                <span class="n">filterInfo</span><span class="p">.</span><span class="n">ActionFilters</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">this</span> <span class="k">as</span> <span class="n">IActionFilter</span><span class="p">);</span>
</div><div class='line marked'>            <span class="k">if</span> <span class="p">(</span><span class="k">this</span> <span class="k">is</span> <span class="n">IResultFilter</span><span class="p">)</span>
</div><div class='line marked'>                <span class="n">filterInfo</span><span class="p">.</span><span class="n">ResultFilters</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">this</span> <span class="k">as</span> <span class="n">IResultFilter</span><span class="p">);</span>
</div><div class='line marked'>            <span class="k">if</span> <span class="p">(</span><span class="k">this</span> <span class="k">is</span> <span class="n">IExceptionFilter</span><span class="p">)</span>
</div><div class='line marked end'>                <span class="n">filterInfo</span><span class="p">.</span><span class="n">ExceptionFilters</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">this</span> <span class="k">as</span> <span class="n">IExceptionFilter</span><span class="p">);</span>
</div><div class='line'>        <span class="p">}</span>
</div><div class='line'> </div><div class='line'>    <span class="p">}</span>
</div></pre></td></tr></table></div></figure>


<p>Bingo, it turns out that if you create a class to inherit <code>FilterProvider</code> and some <code>IActionFilter</code>, they will be automatically applied to your actions as <code>ActionFilter</code> already.</p>

<p>Note that Orchard is clever enough to help you to inject your dependencies using Autofac by constructor injection too.</p>

<h2>Attribute in Orchard</h2>

<!-- more -->


<p>As you can see, when you created your custom filter, it actually automatically applied to <strong>all</strong> your actions.</p>

<p>What happanes if you only want to apply your filter in certain actions using attribute?</p>

<p>Its easy, just check the <code>ThemeFilter</code> and <code>ThemeAttribute</code> as an example:</p>

<ol>
<li>create your own attribute</li>
<li>check whether the action contains this attribute inside your filter.</li>
<li>apply what you want if the attribute exists or do nothing if it&rsquo;s not.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET MVC how to handle unauthorized response in JSON for your API]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/02/11/asp-dot-net-mvc-how-to-handle-unauthorized-response-in-json-for-your-api/"/>
    <updated>2014-02-11T02:16:43+00:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/02/11/asp-dot-net-mvc-how-to-handle-unauthorized-response-in-json-for-your-api</id>
    <content type="html"><![CDATA[<p>Assuming you want to prepare some JSON API in your ASP.NET MVC with authorization.</p>

<p>To share the same authorization logics for our Controller Action, what we should probably do is to implement our own FilterAttributes.</p>

<p>It can be as simple as:</p>

<figure class='code'><figcaption>ApiAuthorizeAttribute.cs</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div><div data-line='16' class='line-number'></div><div data-line='17' class='line-number'></div><div data-line='18' class='line-number'></div><div data-line='19' class='line-number'></div><div data-line='20' class='line-number'></div><div data-line='21' class='line-number'></div><div data-line='22' class='line-number'></div><div data-line='23' class='line-number'></div><div data-line='24' class='line-number'></div><div data-line='25' class='line-number'></div><div data-line='26' class='line-number'></div><div data-line='27' class='line-number'></div></pre></td><td class='main  csharp'><pre><div class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">ApiAuthorizeAttribute</span> <span class="p">:</span> <span class="n">ActionFilterAttribute</span><span class="p">,</span> <span class="n">IAuthorizationFilter</span>
</div><div class='line'>    <span class="p">{</span>
</div><div class='line'>        <span class="c1">//Property Inject here!</span>
</div><div class='line'>        <span class="k">public</span> <span class="n">IAuthTokenService</span> <span class="n">AuthTokenService</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</div><div class='line'> </div><div class='line'>        <span class="k">public</span> <span class="nf">ApiAuthorizeAttribute</span><span class="p">()</span>
</div><div class='line'>        <span class="p">{</span>
</div><div class='line'>        <span class="p">}</span>
</div><div class='line'> </div><div class='line'>        <span class="cp">#region IAuthorizationFilter member</span>
</div><div class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">OnActionExecuting</span><span class="p">(</span><span class="n">ActionExecutingContext</span> <span class="n">filterContext</span><span class="p">)</span>
</div><div class='line'>        <span class="p">{</span>
</div><div class='line'>            <span class="kt">bool</span> <span class="n">authTokenValid</span> <span class="p">=</span> <span class="n">IsRequestTokenValid</span><span class="p">(</span><span class="n">filterContext</span><span class="p">);</span>
</div><div class='line'> </div><div class='line'>            <span class="k">if</span> <span class="p">(!</span><span class="n">authTokenValid</span><span class="p">)</span>
</div><div class='line'>            <span class="p">{</span>
</div><div class='line'>                <span class="n">filterContext</span><span class="p">.</span><span class="n">Result</span> <span class="p">=</span> <span class="k">new</span> <span class="n">JsonResult</span>
</div><div class='line'>                <span class="p">{</span>
</div><div class='line'>                    <span class="n">Data</span> <span class="p">=</span> <span class="k">new</span> <span class="p">{</span> <span class="n">Success</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span> <span class="n">Data</span> <span class="p">=</span> <span class="s">&quot;Unauthorized&quot;</span> <span class="p">},</span>
</div><div class='line'>                    <span class="n">ContentEncoding</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">,</span>
</div><div class='line'>                    <span class="n">ContentType</span> <span class="p">=</span> <span class="s">&quot;application/json&quot;</span><span class="p">,</span>
</div><div class='line'>                    <span class="n">JsonRequestBehavior</span> <span class="p">=</span> <span class="n">JsonRequestBehavior</span><span class="p">.</span><span class="n">AllowGet</span>
</div><div class='line'>                <span class="p">};</span>
</div><div class='line'>            <span class="p">}</span>
</div><div class='line'>        <span class="p">}</span>
</div><div class='line'> </div><div class='line'>    <span class="p">}</span>
</div></pre></td></tr></table></div></figure>


<p>Note we are using property injection here for the <code>IAuthTokenService</code> here, check out <a href="https://code.google.com/p/autofac/wiki/MvcIntegration#Inject_Properties_Into_FilterAttributes" target="_blank" >Inject Properties Into FilterAttributes</a> for more information.</p>

<h2>HTTP status codes</h2>

<p>In order to add our HTTP status codes, we can simple add the following line:</p>

<!-- more -->




<figure class='code'><figcaption>ApiAuthorizeAttribute.cs</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number marked start end'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div></pre></td><td class='main  csharp'><pre><div class='line marked start end'>                <span class="n">filterContext</span><span class="p">.</span><span class="n">HttpContext</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">StatusCode</span> <span class="p">=</span> <span class="m">401</span><span class="p">;</span>
</div><div class='line'>                <span class="n">filterContext</span><span class="p">.</span><span class="n">Result</span> <span class="p">=</span> <span class="k">new</span> <span class="n">JsonResult</span>
</div><div class='line'>                <span class="p">{</span>
</div><div class='line'>                    <span class="n">Data</span> <span class="p">=</span> <span class="k">new</span> <span class="p">{</span> <span class="n">Success</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span> <span class="n">Data</span> <span class="p">=</span> <span class="s">&quot;Unauthorized&quot;</span> <span class="p">},</span>
</div><div class='line'>                    <span class="n">ContentEncoding</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">,</span>
</div><div class='line'>                    <span class="n">ContentType</span> <span class="p">=</span> <span class="s">&quot;application/json&quot;</span><span class="p">,</span>
</div><div class='line'>                    <span class="n">JsonRequestBehavior</span> <span class="p">=</span> <span class="n">JsonRequestBehavior</span><span class="p">.</span><span class="n">AllowGet</span>
</div><div class='line'>                <span class="p">};</span>
</div></pre></td></tr></table></div></figure>


<h2>Problem: The default ASP.NET forms authentication redirect behaviour</h2>

<p>The default ASP.NET forms authentication behaviour will convert HTTP 401 status codes to 302 in order to redirect to the login page.
This probably not we want here as we are expecting a JSON for our API result.</p>

<h2>Solution</h2>

<p>If you are using .Net 4.5, you can apply the new <a href="http://msdn.microsoft.com/en-us/library/system.web.httpresponse.suppressformsauthenticationredirect(v=vs.110).aspx" target="_blank">HttpResponse.SuppressFormsAuthenticationRedirect</a> property.</p>

<p>If you are using .Net 4.0 or lower version, it seems it cannot be done at the moment, but we may try to use different HTTP status code like <a href="http://en.wikipedia.org/wiki/HTTP_403" target="_blank">403</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Authentication API for mobile application using ASP.NET MVC]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/02/06/simple-authentication-api-for-mobile-application-using-asp-dot-net-mvc/"/>
    <updated>2014-02-06T06:22:34+00:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/02/06/simple-authentication-api-for-mobile-application-using-asp-dot-net-mvc</id>
    <content type="html"><![CDATA[<p>This is actually part of server-side implementaion for the previous post: <a href="http://benedict-chan.github.io/blog/2014/02/05/how-to-authenticate-from-a-mobile-application-to-an-existing-web-application/">How to authenticate from a mobile application to an existing web pplication</a>
We are going to create an ASP.NET MVC action as a JSON API to authenticate a mobile client.</p>

<h2>The Token Interface</h2>

<p>First, let&rsquo;s create a token service interface for our API Controller. We will be using dependency injection pattern.</p>

<figure class='code'><figcaption>IAuthTokenService.cs</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div><div data-line='16' class='line-number'></div><div data-line='17' class='line-number'></div><div data-line='18' class='line-number'></div><div data-line='19' class='line-number'></div><div data-line='20' class='line-number'></div><div data-line='21' class='line-number'></div><div data-line='22' class='line-number'></div><div data-line='23' class='line-number'></div><div data-line='24' class='line-number'></div></pre></td><td class='main  csharp'><pre><div class='line'>    <span class="k">public</span> <span class="k">interface</span> <span class="n">IAuthTokenService</span>
</div><div class='line'>    <span class="p">{</span>
</div><div class='line'>        <span class="c1">/// &lt;summary&gt;</span>
</div><div class='line'>        <span class="c1">/// Issue a token for a user</span>
</div><div class='line'>        <span class="c1">/// &lt;/summary&gt;</span>
</div><div class='line'>        <span class="c1">/// &lt;param name=&quot;username&quot;&gt;&lt;/param&gt;</span>
</div><div class='line'>        <span class="c1">/// &lt;returns&gt;tokenId&lt;/returns&gt;</span>
</div><div class='line'>        <span class="kt">string</span> <span class="nf">IssuseToken</span><span class="p">(</span><span class="kt">string</span> <span class="n">username</span><span class="p">);</span>
</div><div class='line'> </div><div class='line'>        <span class="c1">/// &lt;summary&gt;</span>
</div><div class='line'>        <span class="c1">/// Check if a token is valid</span>
</div><div class='line'>        <span class="c1">/// &lt;/summary&gt;</span>
</div><div class='line'>        <span class="c1">/// &lt;param name=&quot;username&quot;&gt;&lt;/param&gt;</span>
</div><div class='line'>        <span class="c1">/// &lt;param name=&quot;tokenId&quot;&gt;&lt;/param&gt;</span>
</div><div class='line'>        <span class="c1">/// &lt;returns&gt;&lt;/returns&gt;</span>
</div><div class='line'>        <span class="kt">bool</span> <span class="nf">IsTokenValid</span><span class="p">(</span><span class="kt">string</span> <span class="n">username</span><span class="p">,</span> <span class="kt">string</span> <span class="n">tokenId</span><span class="p">);</span>
</div><div class='line'> </div><div class='line'>        <span class="c1">/// &lt;summary&gt;</span>
</div><div class='line'>        <span class="c1">/// Expire users&#39; tokens (designed to be called when user changed their password)</span>
</div><div class='line'>        <span class="c1">/// &lt;/summary&gt;</span>
</div><div class='line'>        <span class="c1">/// &lt;param name=&quot;username&quot;&gt;&lt;/param&gt;</span>
</div><div class='line'>        <span class="c1">/// &lt;param name=&quot;tokensCreatedBefore&quot;&gt;expire all tokens created before this time&lt;/param&gt;</span>
</div><div class='line'>        <span class="k">void</span> <span class="nf">ExpireUserTokens</span><span class="p">(</span><span class="kt">string</span> <span class="n">username</span><span class="p">,</span> <span class="n">DateTime</span><span class="p">?</span> <span class="n">tokensCreatedBefore</span><span class="p">);</span>
</div><div class='line'>    <span class="p">}</span>
</div></pre></td></tr></table></div></figure>




<!-- more -->


<h2>The API Controller</h2>

<p>Our API controller can now use the token authentication service as simple as</p>

<figure class='code'><figcaption>SimpleApiController.cs</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div><div data-line='16' class='line-number'></div><div data-line='17' class='line-number'></div><div data-line='18' class='line-number'></div><div data-line='19' class='line-number'></div><div data-line='20' class='line-number'></div><div data-line='21' class='line-number'></div><div data-line='22' class='line-number'></div><div data-line='23' class='line-number'></div><div data-line='24' class='line-number'></div><div data-line='25' class='line-number'></div><div data-line='26' class='line-number'></div><div data-line='27' class='line-number'></div><div data-line='28' class='line-number'></div></pre></td><td class='main  csharp'><pre><div class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">SimpleApiController</span> <span class="p">:</span> <span class="n">Controller</span>
</div><div class='line'>    <span class="p">{</span>
</div><div class='line'>        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IMembershipService</span> <span class="n">_membershipService</span><span class="p">;</span>
</div><div class='line'>        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IAuthTokenService</span> <span class="n">_tokenService</span><span class="p">;</span>
</div><div class='line'> </div><div class='line'>        <span class="k">public</span> <span class="nf">SimpleApiController</span><span class="p">(</span><span class="n">IMembershipService</span> <span class="n">membershipService</span><span class="p">,</span> <span class="n">IAuthTokenService</span> <span class="n">tokenService</span><span class="p">)</span>
</div><div class='line'>        <span class="p">{</span>
</div><div class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">_membershipService</span> <span class="p">=</span> <span class="n">membershipService</span><span class="p">;</span>
</div><div class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">_tokenService</span> <span class="p">=</span> <span class="n">tokenService</span><span class="p">;</span>
</div><div class='line'>        <span class="p">}</span>
</div><div class='line'><span class="na">   </span>
</div><div class='line'><span class="na">        [HttpPost]</span>
</div><div class='line'>        <span class="k">public</span> <span class="n">JsonResult</span> <span class="nf">MobileAuthenticate</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="kt">string</span> <span class="n">password</span><span class="p">)</span>
</div><div class='line'>        <span class="p">{</span>
</div><div class='line'>            <span class="kt">bool</span> <span class="n">valid</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_membershipService</span><span class="p">.</span><span class="n">ValidateUser</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">);</span>
</div><div class='line'> </div><div class='line'>            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AuthTokenResult</span><span class="p">()</span> <span class="p">{</span><span class="n">Success</span> <span class="p">=</span> <span class="k">false</span><span class="p">};</span>
</div><div class='line'> </div><div class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">valid</span><span class="p">)</span>
</div><div class='line'>            <span class="p">{</span>
</div><div class='line'>                <span class="kt">var</span> <span class="n">token</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_tokenService</span><span class="p">.</span><span class="n">IssuseToken</span><span class="p">(</span><span class="n">email</span><span class="p">);</span>
</div><div class='line'>                <span class="n">result</span><span class="p">.</span><span class="n">Success</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</div><div class='line'>                <span class="n">result</span><span class="p">.</span><span class="n">TokenId</span> <span class="p">=</span> <span class="n">token</span><span class="p">;</span>
</div><div class='line'>            <span class="p">}</span>
</div><div class='line'> </div><div class='line'>            <span class="k">return</span> <span class="nf">Json</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
</div><div class='line'>        <span class="p">}</span>
</div><div class='line'>    <span class="p">}</span>
</div></pre></td></tr></table></div></figure>


<h2>Unit Test</h2>

<p>Now that we have our interface, and we have our controller.
Let&rsquo;s create an unit test first, yes, we don&rsquo;t actually need to implement our interface when we write our test.
We can actually assign someone to help us to implement the interface later.</p>

<p>Alright, below is one of our test. We will use <a target="_blank" href="https://github.com/Moq/moq4">Moq</a> to help us mock our interface.</p>

<figure class='code'><figcaption>SimpleApiControllerTest.cs</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div><div data-line='16' class='line-number'></div><div data-line='17' class='line-number'></div><div data-line='18' class='line-number'></div><div data-line='19' class='line-number'></div><div data-line='20' class='line-number'></div><div data-line='21' class='line-number'></div><div data-line='22' class='line-number'></div><div data-line='23' class='line-number'></div><div data-line='24' class='line-number'></div><div data-line='25' class='line-number'></div><div data-line='26' class='line-number'></div><div data-line='27' class='line-number'></div><div data-line='28' class='line-number'></div></pre></td><td class='main  csharp'><pre><div class='line'><span class="na">    [TestClass()]</span>
</div><div class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">SimpleApiControllerTest</span>
</div><div class='line'>    <span class="p">{</span>
</div><div class='line'>        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IMembershipService</span> <span class="n">_membershipService</span><span class="p">;</span>
</div><div class='line'>        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IAuthTokenService</span> <span class="n">_tokenService</span><span class="p">;</span>
</div><div class='line'> </div><div class='line'><span class="na">        [TestMethod()]</span>
</div><div class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">MobileAuthenticateSuccess</span><span class="p">()</span>
</div><div class='line'>        <span class="p">{</span>
</div><div class='line'>            <span class="kt">var</span> <span class="n">tokenId</span> <span class="p">=</span> <span class="s">&quot;dummyToken&quot;</span><span class="p">;</span>
</div><div class='line'>            <span class="kt">var</span> <span class="n">email</span> <span class="p">=</span> <span class="s">&quot;some@email.com&quot;</span><span class="p">;</span>
</div><div class='line'>            <span class="kt">var</span> <span class="n">password</span> <span class="p">=</span> <span class="s">&quot;abcdef&quot;</span><span class="p">;</span>
</div><div class='line'> </div><div class='line'>            <span class="kt">var</span> <span class="n">memberMock</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mock</span><span class="p">&lt;</span><span class="n">IMembershipService</span><span class="p">&gt;();</span>
</div><div class='line'>            <span class="n">memberMock</span><span class="p">.</span><span class="n">Setup</span><span class="p">(</span><span class="n">m</span> <span class="p">=&gt;</span> <span class="n">m</span><span class="p">.</span><span class="n">ValidateUser</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;(),</span> <span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;())).</span><span class="n">Returns</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</div><div class='line'> </div><div class='line'>            <span class="kt">var</span> <span class="n">tokenMock</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mock</span><span class="p">&lt;</span><span class="n">IAuthTokenService</span><span class="p">&gt;();</span>
</div><div class='line'>            <span class="n">tokenMock</span><span class="p">.</span><span class="n">Setup</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">IssuseToken</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;())).</span><span class="n">Returns</span><span class="p">(</span><span class="n">tokenId</span><span class="p">);</span>
</div><div class='line'> </div><div class='line'>            <span class="kt">var</span> <span class="n">controller</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SimpleApiController</span><span class="p">(</span><span class="n">memberMock</span><span class="p">.</span><span class="n">Object</span><span class="p">,</span> <span class="n">tokenMock</span><span class="p">.</span><span class="n">Object</span><span class="p">);</span>
</div><div class='line'>            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">controller</span><span class="p">.</span><span class="n">MobileAuthenticate</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">);</span>
</div><div class='line'> </div><div class='line'>            <span class="kt">var</span> <span class="n">authResult</span> <span class="p">=</span> <span class="p">((</span><span class="n">JsonResult</span><span class="p">)</span><span class="n">result</span><span class="p">).</span><span class="n">Data</span> <span class="k">as</span> <span class="n">AuthTokenResult</span><span class="p">;</span>
</div><div class='line'> </div><div class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="k">true</span><span class="p">,</span> <span class="n">authResult</span><span class="p">.</span><span class="n">Success</span><span class="p">);</span>
</div><div class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="n">tokenId</span><span class="p">,</span> <span class="n">authResult</span><span class="p">.</span><span class="n">TokenId</span><span class="p">);</span>
</div><div class='line'>        <span class="p">}</span>
</div><div class='line'>    <span class="p">}</span>
</div></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to authenticate from a mobile application to an existing web application]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/02/05/how-to-authenticate-from-a-mobile-application-to-an-existing-web-application/"/>
    <updated>2014-02-05T05:35:51+00:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/02/05/how-to-authenticate-from-a-mobile-application-to-an-existing-web-application</id>
    <content type="html"><![CDATA[<h2>The problem</h2>

<p>The experience for a user authenticating to a web site vs a mobile application is totally different.</p>

<h3>The web experience</h3>

<ol>
<li>User comes to a web site</li>
<li>User got redirected to the Login Page if needed</li>
<li>User login by using their UserId,Password (cookie is created)</li>
<li>User logout or leave the browser (cookie may expire)</li>
<li>User come to the web applicaton next time, may need to login again (if cookie expired)</li>
</ol>


<h3>The mobile app experience</h3>

<ol>
<li>User open the app for the first time, asked login with their UserId,Password</li>
<li>After that, in most cases, user access to the app assuming they are always logged in and never need to logout or login again.</li>
</ol>


<h2>The solution</h2>

<!-- more -->


<h3>Create an API for the mobile to authenticate an user</h3>

<p>An API call is needed for the mobile app to authenticate an user by UserId/password.
For security reason, it should connect via a SSL secure connection.</p>

<h3>Issue a token to the mobile from the API when the user logins successfully</h3>

<p>For security reason, we should never save a user password in the mobile app, therefore, what we do is to issue a token which acts like a never expired cookie as in a web application.</p>

<h4>About the token</h4>

<p>When creating this authentication token, we should remember that a user may have more than one device installing our mobile application.
Therefore
1. The relationship for a user to a token is not a one-to-one but one-to-many relationship.
2. The token should have a corresponding timestamp when created because in case a user changed their password, all token issued before this password changing time should be expired</p>

<h3>Calling other Web Application&rsquo;s API</h3>

<p>Your mobile application should now use this token to call your server-side APIs. Your server-side should validate this token as a similair way as how to validates a login cookie.
One way to pass this token, is to send it throught HTTP headers instead of a URL query parameters.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding simple SEO for octopress]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/01/28/adding-simple-seo-for-octopress/"/>
    <updated>2014-01-28T23:34:19+00:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/01/28/adding-simple-seo-for-octopress</id>
    <content type="html"><![CDATA[<h2>Adding Meta Tag, Keywords and Descriptions for your Octopress Blog</h2>

<p>I just started using Octopress, seems it is quite simple to setup. However, the default template doesn&rsquo;t provide the fields for your site, your post, or your pages.
After a google search, seems it is quite easy to setup.</p>

<h2>The main Octopress Site</h2>

<h5>Description</h5>

<p>Meta tag <code>Description</code> is aleady in config file <code>_config.yml</code>. However, to show it in the main site. You have to modify the file <code>source/_includes/head.html</code>.</p>

<figure class='code'><figcaption>source/_includes/head.html</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='10' class='line-number marked start'></div><div data-line='11' class='line-number marked end'></div><div data-line='12' class='line-number'></div></pre></td><td class='main  rb'><pre><div class='line marked start'><span class="o">-</span><span class="p">{</span><span class="o">%</span> <span class="n">capture</span> <span class="n">description</span> <span class="sx">%}&#x7b;&#x25; if page.description %}</span><span class="p">&#x7b;&#x7b;</span> <span class="n">page</span><span class="o">.</span><span class="n">description</span> <span class="p">}}{</span><span class="o">%</span> <span class="k">else</span> <span class="sx">%}&#x7b;&#x7b; content | raw_content }</span><span class="p">}{</span><span class="o">%</span> <span class="n">endif</span> <span class="sx">%}&#x7b;&#x25; endcapture %}</span>
</div><div class='line marked end'><span class="o">+</span><span class="p">{</span><span class="o">%</span> <span class="n">capture</span> <span class="n">description</span> <span class="sx">%}&#x7b;&#x25; if page.description %}</span><span class="p">&#x7b;&#x7b;</span> <span class="n">page</span><span class="o">.</span><span class="n">description</span> <span class="p">}}{</span><span class="o">%</span> <span class="k">elsif</span> <span class="n">site</span><span class="o">.</span><span class="n">description</span> <span class="sx">%}&#x7b;&#x7b; site.description }</span><span class="p">}{</span><span class="o">%</span> <span class="k">else</span> <span class="sx">%}&#x7b;&#x7b; content | raw_content }</span><span class="p">}{</span><span class="o">%</span> <span class="n">endif</span> <span class="sx">%}&#x7b;&#x25; endcapture %}</span>
</div><div class='line'><span class="o">&lt;</span><span class="n">meta</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;description&quot;</span> <span class="n">content</span><span class="o">=</span><span class="s2">&quot;&#x7b;&#x7b; description | strip_html | condense_spaces | truncate:150 }}&quot;</span><span class="o">&gt;</span>
</div></pre></td></tr></table></div></figure>




<!-- more -->


<h5>Keywords</h5>

<p>We have to add meta tag <code>keywords</code> is in config file <code>_config.yml</code> ourselves. We also need to modify the file <code>source/_includes/head.html</code> again for this change.</p>

<figure class='code'><figcaption>_config.yml</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='10' class='line-number'></div><div data-line='11' class='line-number marked start end'></div></pre></td><td class='main  rb'><pre><div class='line'><span class="ss">description</span><span class="p">:</span> <span class="no">Site</span><span class="o">/</span><span class="no">Blog</span> <span class="n">description</span>
</div><div class='line marked start end'><span class="o">+</span><span class="ss">keywords</span><span class="p">:</span> <span class="s2">&quot;siteKeywords&quot;</span>
</div></pre></td></tr></table></div></figure>




<figure class='code'><figcaption>source/_includes/head.html</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='12' class='line-number marked start'></div><div data-line='13' class='line-number marked'></div><div data-line='14' class='line-number marked end'></div></pre></td><td class='main  rb'><pre><div class='line marked start'><span class="o">-</span><span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="n">page</span><span class="o">.</span><span class="n">keywords</span> <span class="sx">%}&lt;meta name=&quot;keywords&quot; content=&quot;&#x7b;&#x7b; page.keywords }</span><span class="p">}</span><span class="s2">&quot;&gt;&#x7b;&#x25; endif %}</span>
</div><div class='line marked'><span class="s2">+&#x7b;&#x25; capture keywords %}&#x7b;&#x25; if page.keywords %}&#x7b;&#x7b; page.keywords }}&#x7b;&#x25; elsif site.keywords %}&#x7b;&#x7b; site.keywords }}&#x7b;&#x25; endif %}&#x7b;&#x25; endcapture %}</span>
</div><div class='line marked end'><span class="s2">+&lt;meta name=&quot;</span><span class="n">keywords</span><span class="s2">&quot; content=&quot;</span><span class="p">&#x7b;&#x7b;</span> <span class="n">keywords</span> <span class="o">|</span> <span class="n">strip_html</span> <span class="o">|</span> <span class="n">condense_spaces</span> <span class="p">}}</span><span class="s2">&quot; /&gt;</span>
</div></pre></td></tr></table></div></figure>


<h2>New Post</h2>

<p>The default template for creating new post or pages doesn&rsquo;t provide you the meta tag <code>Description</code> and <code>keywords</code>. We can add it in the RakeFile.</p>

<figure class='code'><figcaption>Rakefile</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='92' class='line-number'></div><div data-line='93' class='line-number'></div><div data-line='94' class='line-number'></div><div data-line='95' class='line-number'></div><div data-line='96' class='line-number'></div><div data-line='97' class='line-number'></div><div data-line='98' class='line-number'></div><div data-line='99' class='line-number'></div><div data-line='100' class='line-number'></div><div data-line='101' class='line-number'></div><div data-line='102' class='line-number'></div><div data-line='103' class='line-number'></div><div data-line='104' class='line-number'></div><div data-line='105' class='line-number'></div><div data-line='106' class='line-number'></div><div data-line='107' class='line-number'></div><div data-line='108' class='line-number'></div><div data-line='109' class='line-number'></div><div data-line='110' class='line-number'></div><div data-line='111' class='line-number'></div><div data-line='112' class='line-number'></div><div data-line='113' class='line-number'></div><div data-line='114' class='line-number marked start'></div><div data-line='115' class='line-number marked end'></div><div data-line='116' class='line-number'></div><div data-line='117' class='line-number'></div></pre></td><td class='main  rb'><pre><div class='line'><span class="c1"># usage rake new_post[my-new-post] or rake new_post[&#39;my new post&#39;] or rake new_post (defaults to &quot;new-post&quot;)</span>
</div><div class='line'><span class="n">desc</span> <span class="s2">&quot;Begin a new post in </span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">posts_dir</span><span class="si">}</span><span class="s2">&quot;</span>
</div><div class='line'><span class="n">task</span> <span class="ss">:new_post</span><span class="p">,</span> <span class="ss">:title</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</div><div class='line'>  <span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">title</span>
</div><div class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">title</span>
</div><div class='line'>  <span class="k">else</span>
</div><div class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">get_stdin</span><span class="p">(</span><span class="s2">&quot;Enter a title for your post: &quot;</span><span class="p">)</span>
</div><div class='line'>  <span class="k">end</span>
</div><div class='line'>  <span class="k">raise</span> <span class="s2">&quot;### You haven&#39;t set anything up yet. First run `rake install` to set up an Octopress theme.&quot;</span> <span class="k">unless</span> <span class="no">File</span><span class="o">.</span><span class="n">directory?</span><span class="p">(</span><span class="n">source_dir</span><span class="p">)</span>
</div><div class='line'>  <span class="n">mkdir_p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">posts_dir</span><span class="si">}</span><span class="s2">&quot;</span>
</div><div class='line'>  <span class="n">filename</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">posts_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">title</span><span class="o">.</span><span class="n">to_url</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="n">new_post_ext</span><span class="si">}</span><span class="s2">&quot;</span>
</div><div class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</div><div class='line'>    <span class="nb">abort</span><span class="p">(</span><span class="s2">&quot;rake aborted!&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">ask</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2"> already exists. Do you want to overwrite?&quot;</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="o">]</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;n&#39;</span>
</div><div class='line'>  <span class="k">end</span>
</div><div class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Creating new post: </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</div><div class='line'>  <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</div><div class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;---&quot;</span>
</div><div class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;layout: post&quot;</span>
</div><div class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;title: </span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">title</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/&amp;/</span><span class="p">,</span><span class="s1">&#39;&amp;amp;&#39;</span><span class="p">)</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</div><div class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;date: </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d %H:%M:%S %z&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</div><div class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;comments: true&quot;</span>
</div><div class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;categories: &quot;</span>
</div><div class='line marked start'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;description: &quot;</span>
</div><div class='line marked end'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;keywords: &quot;</span>
</div><div class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;---&quot;</span>
</div><div class='line'>  <span class="k">end</span>
</div></pre></td></tr></table></div></figure>


<h2>Reference</h2>

<ul>
<li><a href="http://xit0.org/2013/05/seo-for-octopress-websites/" target="_blank">SEO for Octopress Websites</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Octopress with Github pages in Windows]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/01/28/setup-octopress-with-github-pages-in-windows/"/>
    <updated>2014-01-28T03:11:37+00:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/01/28/setup-octopress-with-github-pages-in-windows</id>
    <content type="html"><![CDATA[<h2>Software</h2>

<ol>
<li>Install <a href="http://git-scm.com/">Git</a>, <a href="http://windows.github.com">GitHub for Windows</a></li>
<li>Install <a href="http://rubyinstaller.org/downloads/">Ruby Installer for Windows</a></li>
<li>Install <a href="https://github.com/oneclick/rubyinstaller/downloads/">Ruby Development Kit</a>
, extract this to a folder like <code>C:\RubyDevKit</code></li>
</ol>


<h2>Setup Ruby</h2>

<pre><code>cd C:\RubyDevKit
ruby dk.rb init
ruby dk.rb install
</code></pre>

<h2>Setup Octopress</h2>

<h4>Go to your source folder and clone Octopress</h4>

<pre><code>git clone git://github.com/imathis/octopress.git username
</code></pre>

<!-- more -->


<h4>Install ruby&rsquo;s bundler</h4>

<pre><code>cd username
gem install bundler
bundle install
</code></pre>

<h2>Setup Github repository and pages</h2>

<p>Create a new repository named: <code>username.github.io</code> in github</p>

<h4>Fix hellip in Windows</h4>

<p>In order to generate our first Octopress templates, we have to modify the <code>Rakefile</code>, just remove <code>&amp;hellip;</code></p>

<figure class='code'><figcaption>Rakefile</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='348' class='line-number'></div><div data-line='349' class='line-number marked start end'></div><div data-line='350' class='line-number'></div></pre></td><td class='main  rb'><pre><div class='line'><span class="nb">system</span> <span class="s2">&quot;git init&quot;</span>
</div><div class='line marked start end'><span class="nb">system</span> <span class="s2">&quot;echo &#39;My Octopress Page is coming soon&#39; &gt; index.html&quot;</span>
</div><div class='line'><span class="nb">system</span> <span class="s2">&quot;git add .&quot;</span>
</div></pre></td></tr></table></div></figure>


<p>You can then run</p>

<pre><code>rake setup_github_pages
</code></pre>

<p>This will ask your github repository url and add your repository as the default origin, you can check this after by</p>

<pre><code>git remote -v
</code></pre>

<h4>Config the blog</h4>

<p>Just head to the file <a href="http://octopress.org/docs/configuring/"><code>_config.ym</code></a></p>

<h2>Create your site</h2>

<pre><code>rake generate
</code></pre>

<h2>Preview it locally</h2>

<pre><code>rake preview
</code></pre>

<p>It should now be shown in <a href="http://localhost:4000" target="_blank"><a href="http://localhost:4000">http://localhost:4000</a></a></p>

<h2>Start a new Post</h2>

<pre><code>rake new_post["New Post"]
</code></pre>

<h2>Deploy to github</h2>

<pre><code>rake deploy
</code></pre>

<p>This will generate your copy and copied to <code>_deploy</code> folder.</p>

<h2>Commit your source too</h2>

<pre><code>git add .
git commit -m 'your message'
git push origin source
</code></pre>

<h2>Reference</h2>

<ul>
<li><a href="http://www.techelex.org/setup-octopress-on-windows7/" target="_blank">Setup Octopress on Windows7</a></li>
<li><a href="http://derantell.github.io/blog/2012/12/02/getting-started-with-octopress-on-windows/" target="_blank">Getting Started With Octopress on Windows</a></li>
<li><a href="http://octopress.org/docs/blogging/code/" target="_blank">Sharing Code Snippets</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
