<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Benedict Chan]]></title>
  <link href="http://benedict-chan.github.io/atom.xml" rel="self"/>
  <link href="http://benedict-chan.github.io/"/>
  <updated>2014-02-11T14:51:23+11:00</updated>
  <id>http://benedict-chan.github.io/</id>
  <author>
    <name><![CDATA[Benedict Chan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ASP.NET MVC how to handle unauthorized response in JSON for your API]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/02/11/asp-dot-net-mvc-how-to-handle-unauthorized-response-in-json-for-your-api/"/>
    <updated>2014-02-11T13:16:43+11:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/02/11/asp-dot-net-mvc-how-to-handle-unauthorized-response-in-json-for-your-api</id>
    <content type="html"><![CDATA[<p>Assuming you want to prepare some JSON API in your ASP.NET MVC with authorization.</p>

<p>To share the same authorization logics for our Controller Action, what we should probably do is to implement our own FilterAttributes.</p>

<p>It can be as simple as:</p>

<figure class='code'><figcaption>ApiAuthorizeAttribute.cs</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div><div data-line='16' class='line-number'></div><div data-line='17' class='line-number'></div><div data-line='18' class='line-number'></div><div data-line='19' class='line-number'></div><div data-line='20' class='line-number'></div><div data-line='21' class='line-number'></div><div data-line='22' class='line-number'></div><div data-line='23' class='line-number'></div><div data-line='24' class='line-number'></div><div data-line='25' class='line-number'></div><div data-line='26' class='line-number'></div><div data-line='27' class='line-number'></div></pre></td><td class='main  csharp'><pre><div class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">ApiAuthorizeAttribute</span> <span class="p">:</span> <span class="n">ActionFilterAttribute</span><span class="p">,</span> <span class="n">IAuthorizationFilter</span>
</div><div class='line'>    <span class="p">{</span>
</div><div class='line'>        <span class="c1">//Property Inject here!</span>
</div><div class='line'>        <span class="k">public</span> <span class="n">IAuthTokenService</span> <span class="n">AuthTokenService</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</div><div class='line'> </div><div class='line'>        <span class="k">public</span> <span class="nf">ApiAuthorizeAttribute</span><span class="p">()</span>
</div><div class='line'>        <span class="p">{</span>
</div><div class='line'>        <span class="p">}</span>
</div><div class='line'> </div><div class='line'>        <span class="cp">#region IAuthorizationFilter member</span>
</div><div class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">OnActionExecuting</span><span class="p">(</span><span class="n">ActionExecutingContext</span> <span class="n">filterContext</span><span class="p">)</span>
</div><div class='line'>        <span class="p">{</span>
</div><div class='line'>            <span class="kt">bool</span> <span class="n">authTokenValid</span> <span class="p">=</span> <span class="n">IsRequestTokenValid</span><span class="p">(</span><span class="n">filterContext</span><span class="p">);</span>
</div><div class='line'> </div><div class='line'>            <span class="k">if</span> <span class="p">(!</span><span class="n">authTokenValid</span><span class="p">)</span>
</div><div class='line'>            <span class="p">{</span>
</div><div class='line'>                <span class="n">filterContext</span><span class="p">.</span><span class="n">Result</span> <span class="p">=</span> <span class="k">new</span> <span class="n">JsonResult</span>
</div><div class='line'>                <span class="p">{</span>
</div><div class='line'>                    <span class="n">Data</span> <span class="p">=</span> <span class="k">new</span> <span class="p">{</span> <span class="n">Success</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span> <span class="n">Data</span> <span class="p">=</span> <span class="s">&quot;Unauthorized&quot;</span> <span class="p">},</span>
</div><div class='line'>                    <span class="n">ContentEncoding</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">,</span>
</div><div class='line'>                    <span class="n">ContentType</span> <span class="p">=</span> <span class="s">&quot;application/json&quot;</span><span class="p">,</span>
</div><div class='line'>                    <span class="n">JsonRequestBehavior</span> <span class="p">=</span> <span class="n">JsonRequestBehavior</span><span class="p">.</span><span class="n">AllowGet</span>
</div><div class='line'>                <span class="p">};</span>
</div><div class='line'>            <span class="p">}</span>
</div><div class='line'>        <span class="p">}</span>
</div><div class='line'> </div><div class='line'>    <span class="p">}</span>
</div></pre></td></tr></table></div></figure>


<p>Note we are using property injection here for the <code>IAuthTokenService</code> here, check out <a href="https://code.google.com/p/autofac/wiki/MvcIntegration#Inject_Properties_Into_FilterAttributes" target="_blank" >Inject Properties Into FilterAttributes</a> for more information.</p>

<h2>HTTP status codes</h2>

<p>In order to add our HTTP status codes, we can simple add the following line:</p>

<!-- more -->




<figure class='code'><figcaption>ApiAuthorizeAttribute.cs</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number marked start end'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div></pre></td><td class='main  csharp'><pre><div class='line marked start end'>                <span class="n">filterContext</span><span class="p">.</span><span class="n">HttpContext</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">StatusCode</span> <span class="p">=</span> <span class="m">401</span><span class="p">;</span>
</div><div class='line'>                <span class="n">filterContext</span><span class="p">.</span><span class="n">Result</span> <span class="p">=</span> <span class="k">new</span> <span class="n">JsonResult</span>
</div><div class='line'>                <span class="p">{</span>
</div><div class='line'>                    <span class="n">Data</span> <span class="p">=</span> <span class="k">new</span> <span class="p">{</span> <span class="n">Success</span> <span class="p">=</span> <span class="k">false</span><span class="p">,</span> <span class="n">Data</span> <span class="p">=</span> <span class="s">&quot;Unauthorized&quot;</span> <span class="p">},</span>
</div><div class='line'>                    <span class="n">ContentEncoding</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">,</span>
</div><div class='line'>                    <span class="n">ContentType</span> <span class="p">=</span> <span class="s">&quot;application/json&quot;</span><span class="p">,</span>
</div><div class='line'>                    <span class="n">JsonRequestBehavior</span> <span class="p">=</span> <span class="n">JsonRequestBehavior</span><span class="p">.</span><span class="n">AllowGet</span>
</div><div class='line'>                <span class="p">};</span>
</div></pre></td></tr></table></div></figure>


<h2>Problem: The default ASP.NET forms authentication redirect behaviour</h2>

<p>The default ASP.NET forms authentication behaviour will convert HTTP 401 status codes to 302 in order to redirect to the login page.
This probably not we want here as we are expecting a JSON for our API result.</p>

<h2>Solution</h2>

<p>If you are using .Net 4.5, you can apply the new <a href="http://msdn.microsoft.com/en-us/library/system.web.httpresponse.suppressformsauthenticationredirect(v=vs.110).aspx" target="_blank">HttpResponse.SuppressFormsAuthenticationRedirect</a> property.</p>

<p>If you are using .Net 4.0 or lower version, it seems it cannot be done at the moment, but we may try to use different HTTP status code like <a href="http://en.wikipedia.org/wiki/HTTP_403" target="_blank">403</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Authentication API for mobile application using ASP.NET MVC]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/02/06/simple-authentication-api-for-mobile-application-using-asp-dot-net-mvc/"/>
    <updated>2014-02-06T17:22:34+11:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/02/06/simple-authentication-api-for-mobile-application-using-asp-dot-net-mvc</id>
    <content type="html"><![CDATA[<p>This is actually part of server-side implementaion for the previous post: <a href="http://benedict-chan.github.io/blog/2014/02/05/how-to-authenticate-from-a-mobile-application-to-an-existing-web-application/">How to authenticate from a mobile application to an existing web pplication</a>
We are going to create an ASP.NET MVC action as a JSON API to authenticate a mobile client.</p>

<h2>The Token Interface</h2>

<p>First, let&rsquo;s create a token service interface for our API Controller. We will be using dependency injection pattern.</p>

<figure class='code'><figcaption>IAuthTokenService.cs</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div><div data-line='16' class='line-number'></div><div data-line='17' class='line-number'></div><div data-line='18' class='line-number'></div><div data-line='19' class='line-number'></div><div data-line='20' class='line-number'></div><div data-line='21' class='line-number'></div><div data-line='22' class='line-number'></div><div data-line='23' class='line-number'></div><div data-line='24' class='line-number'></div></pre></td><td class='main  csharp'><pre><div class='line'>    <span class="k">public</span> <span class="k">interface</span> <span class="n">IAuthTokenService</span>
</div><div class='line'>    <span class="p">{</span>
</div><div class='line'>        <span class="c1">/// &lt;summary&gt;</span>
</div><div class='line'>        <span class="c1">/// Issue a token for a user</span>
</div><div class='line'>        <span class="c1">/// &lt;/summary&gt;</span>
</div><div class='line'>        <span class="c1">/// &lt;param name=&quot;username&quot;&gt;&lt;/param&gt;</span>
</div><div class='line'>        <span class="c1">/// &lt;returns&gt;tokenId&lt;/returns&gt;</span>
</div><div class='line'>        <span class="kt">string</span> <span class="nf">IssuseToken</span><span class="p">(</span><span class="kt">string</span> <span class="n">username</span><span class="p">);</span>
</div><div class='line'> </div><div class='line'>        <span class="c1">/// &lt;summary&gt;</span>
</div><div class='line'>        <span class="c1">/// Check if a token is valid</span>
</div><div class='line'>        <span class="c1">/// &lt;/summary&gt;</span>
</div><div class='line'>        <span class="c1">/// &lt;param name=&quot;username&quot;&gt;&lt;/param&gt;</span>
</div><div class='line'>        <span class="c1">/// &lt;param name=&quot;tokenId&quot;&gt;&lt;/param&gt;</span>
</div><div class='line'>        <span class="c1">/// &lt;returns&gt;&lt;/returns&gt;</span>
</div><div class='line'>        <span class="kt">bool</span> <span class="nf">IsTokenValid</span><span class="p">(</span><span class="kt">string</span> <span class="n">username</span><span class="p">,</span> <span class="kt">string</span> <span class="n">tokenId</span><span class="p">);</span>
</div><div class='line'> </div><div class='line'>        <span class="c1">/// &lt;summary&gt;</span>
</div><div class='line'>        <span class="c1">/// Expire users&#39; tokens (designed to be called when user changed their password)</span>
</div><div class='line'>        <span class="c1">/// &lt;/summary&gt;</span>
</div><div class='line'>        <span class="c1">/// &lt;param name=&quot;username&quot;&gt;&lt;/param&gt;</span>
</div><div class='line'>        <span class="c1">/// &lt;param name=&quot;tokensCreatedBefore&quot;&gt;expire all tokens created before this time&lt;/param&gt;</span>
</div><div class='line'>        <span class="k">void</span> <span class="nf">ExpireUserTokens</span><span class="p">(</span><span class="kt">string</span> <span class="n">username</span><span class="p">,</span> <span class="n">DateTime</span><span class="p">?</span> <span class="n">tokensCreatedBefore</span><span class="p">);</span>
</div><div class='line'>    <span class="p">}</span>
</div></pre></td></tr></table></div></figure>




<!-- more -->


<h2>The API Controller</h2>

<p>Our API controller can now use the token authentication service as simple as</p>

<figure class='code'><figcaption>SimpleApiController.cs</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div><div data-line='16' class='line-number'></div><div data-line='17' class='line-number'></div><div data-line='18' class='line-number'></div><div data-line='19' class='line-number'></div><div data-line='20' class='line-number'></div><div data-line='21' class='line-number'></div><div data-line='22' class='line-number'></div><div data-line='23' class='line-number'></div><div data-line='24' class='line-number'></div><div data-line='25' class='line-number'></div><div data-line='26' class='line-number'></div><div data-line='27' class='line-number'></div><div data-line='28' class='line-number'></div></pre></td><td class='main  csharp'><pre><div class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">SimpleApiController</span> <span class="p">:</span> <span class="n">Controller</span>
</div><div class='line'>    <span class="p">{</span>
</div><div class='line'>        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IMembershipService</span> <span class="n">_membershipService</span><span class="p">;</span>
</div><div class='line'>        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IAuthTokenService</span> <span class="n">_tokenService</span><span class="p">;</span>
</div><div class='line'> </div><div class='line'>        <span class="k">public</span> <span class="nf">SimpleApiController</span><span class="p">(</span><span class="n">IMembershipService</span> <span class="n">membershipService</span><span class="p">,</span> <span class="n">IAuthTokenService</span> <span class="n">tokenService</span><span class="p">)</span>
</div><div class='line'>        <span class="p">{</span>
</div><div class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">_membershipService</span> <span class="p">=</span> <span class="n">membershipService</span><span class="p">;</span>
</div><div class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">_tokenService</span> <span class="p">=</span> <span class="n">tokenService</span><span class="p">;</span>
</div><div class='line'>        <span class="p">}</span>
</div><div class='line'><span class="na">   </span>
</div><div class='line'><span class="na">        [HttpPost]</span>
</div><div class='line'>        <span class="k">public</span> <span class="n">JsonResult</span> <span class="nf">MobileAuthenticate</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="kt">string</span> <span class="n">password</span><span class="p">)</span>
</div><div class='line'>        <span class="p">{</span>
</div><div class='line'>            <span class="kt">bool</span> <span class="n">valid</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_membershipService</span><span class="p">.</span><span class="n">ValidateUser</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">);</span>
</div><div class='line'> </div><div class='line'>            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AuthTokenResult</span><span class="p">()</span> <span class="p">{</span><span class="n">Success</span> <span class="p">=</span> <span class="k">false</span><span class="p">};</span>
</div><div class='line'> </div><div class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">valid</span><span class="p">)</span>
</div><div class='line'>            <span class="p">{</span>
</div><div class='line'>                <span class="kt">var</span> <span class="n">token</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">_tokenService</span><span class="p">.</span><span class="n">IssuseToken</span><span class="p">(</span><span class="n">email</span><span class="p">);</span>
</div><div class='line'>                <span class="n">result</span><span class="p">.</span><span class="n">Success</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</div><div class='line'>                <span class="n">result</span><span class="p">.</span><span class="n">TokenId</span> <span class="p">=</span> <span class="n">token</span><span class="p">;</span>
</div><div class='line'>            <span class="p">}</span>
</div><div class='line'> </div><div class='line'>            <span class="k">return</span> <span class="nf">Json</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
</div><div class='line'>        <span class="p">}</span>
</div><div class='line'>    <span class="p">}</span>
</div></pre></td></tr></table></div></figure>


<h2>Unit Test</h2>

<p>Now that we have our interface, and we have our controller.
Let&rsquo;s create an unit test first, yes, we don&rsquo;t actually need to implement our interface when we write our test.
We can actually assign someone to help us to implement the interface later.</p>

<p>Alright, below is one of our test. We will use <a target="_blank" href="https://github.com/Moq/moq4">Moq</a> to help us mock our interface.</p>

<figure class='code'><figcaption>SimpleApiControllerTest.cs</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div><div data-line='16' class='line-number'></div><div data-line='17' class='line-number'></div><div data-line='18' class='line-number'></div><div data-line='19' class='line-number'></div><div data-line='20' class='line-number'></div><div data-line='21' class='line-number'></div><div data-line='22' class='line-number'></div><div data-line='23' class='line-number'></div><div data-line='24' class='line-number'></div><div data-line='25' class='line-number'></div><div data-line='26' class='line-number'></div><div data-line='27' class='line-number'></div><div data-line='28' class='line-number'></div></pre></td><td class='main  csharp'><pre><div class='line'><span class="na">    [TestClass()]</span>
</div><div class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">SimpleApiControllerTest</span>
</div><div class='line'>    <span class="p">{</span>
</div><div class='line'>        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IMembershipService</span> <span class="n">_membershipService</span><span class="p">;</span>
</div><div class='line'>        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IAuthTokenService</span> <span class="n">_tokenService</span><span class="p">;</span>
</div><div class='line'> </div><div class='line'><span class="na">        [TestMethod()]</span>
</div><div class='line'>        <span class="k">public</span> <span class="k">void</span> <span class="nf">MobileAuthenticateSuccess</span><span class="p">()</span>
</div><div class='line'>        <span class="p">{</span>
</div><div class='line'>            <span class="kt">var</span> <span class="n">tokenId</span> <span class="p">=</span> <span class="s">&quot;dummyToken&quot;</span><span class="p">;</span>
</div><div class='line'>            <span class="kt">var</span> <span class="n">email</span> <span class="p">=</span> <span class="s">&quot;some@email.com&quot;</span><span class="p">;</span>
</div><div class='line'>            <span class="kt">var</span> <span class="n">password</span> <span class="p">=</span> <span class="s">&quot;abcdef&quot;</span><span class="p">;</span>
</div><div class='line'> </div><div class='line'>            <span class="kt">var</span> <span class="n">memberMock</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mock</span><span class="p">&lt;</span><span class="n">IMembershipService</span><span class="p">&gt;();</span>
</div><div class='line'>            <span class="n">memberMock</span><span class="p">.</span><span class="n">Setup</span><span class="p">(</span><span class="n">m</span> <span class="p">=&gt;</span> <span class="n">m</span><span class="p">.</span><span class="n">ValidateUser</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;(),</span> <span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;())).</span><span class="n">Returns</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</div><div class='line'> </div><div class='line'>            <span class="kt">var</span> <span class="n">tokenMock</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mock</span><span class="p">&lt;</span><span class="n">IAuthTokenService</span><span class="p">&gt;();</span>
</div><div class='line'>            <span class="n">tokenMock</span><span class="p">.</span><span class="n">Setup</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">IssuseToken</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;())).</span><span class="n">Returns</span><span class="p">(</span><span class="n">tokenId</span><span class="p">);</span>
</div><div class='line'> </div><div class='line'>            <span class="kt">var</span> <span class="n">controller</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SimpleApiController</span><span class="p">(</span><span class="n">memberMock</span><span class="p">.</span><span class="n">Object</span><span class="p">,</span> <span class="n">tokenMock</span><span class="p">.</span><span class="n">Object</span><span class="p">);</span>
</div><div class='line'>            <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">controller</span><span class="p">.</span><span class="n">MobileAuthenticate</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">);</span>
</div><div class='line'> </div><div class='line'>            <span class="kt">var</span> <span class="n">authResult</span> <span class="p">=</span> <span class="p">((</span><span class="n">JsonResult</span><span class="p">)</span><span class="n">result</span><span class="p">).</span><span class="n">Data</span> <span class="k">as</span> <span class="n">AuthTokenResult</span><span class="p">;</span>
</div><div class='line'> </div><div class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="k">true</span><span class="p">,</span> <span class="n">authResult</span><span class="p">.</span><span class="n">Success</span><span class="p">);</span>
</div><div class='line'>            <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="n">tokenId</span><span class="p">,</span> <span class="n">authResult</span><span class="p">.</span><span class="n">TokenId</span><span class="p">);</span>
</div><div class='line'>        <span class="p">}</span>
</div><div class='line'>    <span class="p">}</span>
</div></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to authenticate from a mobile application to an existing web application]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/02/05/how-to-authenticate-from-a-mobile-application-to-an-existing-web-application/"/>
    <updated>2014-02-05T16:35:51+11:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/02/05/how-to-authenticate-from-a-mobile-application-to-an-existing-web-application</id>
    <content type="html"><![CDATA[<h2>The problem</h2>

<p>The experience for a user authenticating to a web site vs a mobile application is totally different.</p>

<h3>The web experience</h3>

<ol>
<li>User comes to a web site</li>
<li>User got redirected to the Login Page if needed</li>
<li>User login by using their UserId,Password (cookie is created)</li>
<li>User logout or leave the browser (cookie may expire)</li>
<li>User come to the web applicaton next time, may need to login again (if cookie expired)</li>
</ol>


<h3>The mobile app experience</h3>

<ol>
<li>User open the app for the first time, asked login with their UserId,Password</li>
<li>After that, in most cases, user access to the app assuming they are always logged in and never need to logout or login again.</li>
</ol>


<h2>The solution</h2>

<!-- more -->


<h3>Create an API for the mobile to authenticate an user</h3>

<p>An API call is needed for the mobile app to authenticate an user by UserId/password.
For security reason, it should connect via a SSL secure connection.</p>

<h3>Issue a token to the mobile from the API when the user logins successfully</h3>

<p>For security reason, we should never save a user password in the mobile app, therefore, what we do is to issue a token which acts like a never expired cookie as in a web application.</p>

<h4>About the token</h4>

<p>When creating this authentication token, we should remember that a user may have more than one device installing our mobile application.
Therefore
1. The relationship for a user to a token is not a one-to-one but one-to-many relationship.
2. The token should have a corresponding timestamp when created because in case a user changed their password, all token issued before this password changing time should be expired</p>

<h3>Calling other Web Application&rsquo;s API</h3>

<p>Your mobile application should now use this token to call your server-side APIs. Your server-side should validate this token as a similair way as how to validates a login cookie.
One way to pass this token, is to send it throught HTTP headers instead of a URL query parameters.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding simple SEO for octopress]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/01/29/adding-simple-seo-for-octopress/"/>
    <updated>2014-01-29T10:34:19+11:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/01/29/adding-simple-seo-for-octopress</id>
    <content type="html"><![CDATA[<h2>Adding Meta Tag, Keywords and Descriptions for your Octopress Blog</h2>

<p>I just started using Octopress, seems it is quite simple to setup. However, the default template doesn&rsquo;t provide the fields for your site, your post, or your pages.
After a google search, seems it is quite easy to setup.</p>

<h2>The main Octopress Site</h2>

<h5>Description</h5>

<p>Meta tag <code>Description</code> is aleady in config file <code>_config.yml</code>. However, to show it in the main site. You have to modify the file <code>source/_includes/head.html</code>.</p>

<figure class='code'><figcaption>source/_includes/head.html</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='10' class='line-number marked start'></div><div data-line='11' class='line-number marked end'></div><div data-line='12' class='line-number'></div></pre></td><td class='main  rb'><pre><div class='line marked start'><span class="o">-</span><span class="p">{</span><span class="o">%</span> <span class="n">capture</span> <span class="n">description</span> <span class="sx">%}&#x7b;&#x25; if page.description %}</span><span class="p">&#x7b;&#x7b;</span> <span class="n">page</span><span class="o">.</span><span class="n">description</span> <span class="p">}}{</span><span class="o">%</span> <span class="k">else</span> <span class="sx">%}&#x7b;&#x7b; content | raw_content }</span><span class="p">}{</span><span class="o">%</span> <span class="n">endif</span> <span class="sx">%}&#x7b;&#x25; endcapture %}</span>
</div><div class='line marked end'><span class="o">+</span><span class="p">{</span><span class="o">%</span> <span class="n">capture</span> <span class="n">description</span> <span class="sx">%}&#x7b;&#x25; if page.description %}</span><span class="p">&#x7b;&#x7b;</span> <span class="n">page</span><span class="o">.</span><span class="n">description</span> <span class="p">}}{</span><span class="o">%</span> <span class="k">elsif</span> <span class="n">site</span><span class="o">.</span><span class="n">description</span> <span class="sx">%}&#x7b;&#x7b; site.description }</span><span class="p">}{</span><span class="o">%</span> <span class="k">else</span> <span class="sx">%}&#x7b;&#x7b; content | raw_content }</span><span class="p">}{</span><span class="o">%</span> <span class="n">endif</span> <span class="sx">%}&#x7b;&#x25; endcapture %}</span>
</div><div class='line'><span class="o">&lt;</span><span class="n">meta</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;description&quot;</span> <span class="n">content</span><span class="o">=</span><span class="s2">&quot;&#x7b;&#x7b; description | strip_html | condense_spaces | truncate:150 }}&quot;</span><span class="o">&gt;</span>
</div></pre></td></tr></table></div></figure>




<!-- more -->


<h5>Keywords</h5>

<p>We have to add meta tag <code>keywords</code> is in config file <code>_config.yml</code> ourselves. We also need to modify the file <code>source/_includes/head.html</code> again for this change.</p>

<figure class='code'><figcaption>_config.yml</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='10' class='line-number'></div><div data-line='11' class='line-number marked start end'></div></pre></td><td class='main  rb'><pre><div class='line'><span class="ss">description</span><span class="p">:</span> <span class="no">Site</span><span class="o">/</span><span class="no">Blog</span> <span class="n">description</span>
</div><div class='line marked start end'><span class="o">+</span><span class="ss">keywords</span><span class="p">:</span> <span class="s2">&quot;siteKeywords&quot;</span>
</div></pre></td></tr></table></div></figure>




<figure class='code'><figcaption>source/_includes/head.html</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='12' class='line-number marked start'></div><div data-line='13' class='line-number marked'></div><div data-line='14' class='line-number marked end'></div></pre></td><td class='main  rb'><pre><div class='line marked start'><span class="o">-</span><span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="n">page</span><span class="o">.</span><span class="n">keywords</span> <span class="sx">%}&lt;meta name=&quot;keywords&quot; content=&quot;&#x7b;&#x7b; page.keywords }</span><span class="p">}</span><span class="s2">&quot;&gt;&#x7b;&#x25; endif %}</span>
</div><div class='line marked'><span class="s2">+&#x7b;&#x25; capture keywords %}&#x7b;&#x25; if page.keywords %}&#x7b;&#x7b; page.keywords }}&#x7b;&#x25; elsif site.keywords %}&#x7b;&#x7b; site.keywords }}&#x7b;&#x25; endif %}&#x7b;&#x25; endcapture %}</span>
</div><div class='line marked end'><span class="s2">+&lt;meta name=&quot;</span><span class="n">keywords</span><span class="s2">&quot; content=&quot;</span><span class="p">&#x7b;&#x7b;</span> <span class="n">keywords</span> <span class="o">|</span> <span class="n">strip_html</span> <span class="o">|</span> <span class="n">condense_spaces</span> <span class="p">}}</span><span class="s2">&quot; /&gt;</span>
</div></pre></td></tr></table></div></figure>


<h2>New Post</h2>

<p>The default template for creating new post or pages doesn&rsquo;t provide you the meta tag <code>Description</code> and <code>keywords</code>. We can add it in the RakeFile.</p>

<figure class='code'><figcaption>Rakefile</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='92' class='line-number'></div><div data-line='93' class='line-number'></div><div data-line='94' class='line-number'></div><div data-line='95' class='line-number'></div><div data-line='96' class='line-number'></div><div data-line='97' class='line-number'></div><div data-line='98' class='line-number'></div><div data-line='99' class='line-number'></div><div data-line='100' class='line-number'></div><div data-line='101' class='line-number'></div><div data-line='102' class='line-number'></div><div data-line='103' class='line-number'></div><div data-line='104' class='line-number'></div><div data-line='105' class='line-number'></div><div data-line='106' class='line-number'></div><div data-line='107' class='line-number'></div><div data-line='108' class='line-number'></div><div data-line='109' class='line-number'></div><div data-line='110' class='line-number'></div><div data-line='111' class='line-number'></div><div data-line='112' class='line-number'></div><div data-line='113' class='line-number'></div><div data-line='114' class='line-number marked start'></div><div data-line='115' class='line-number marked end'></div><div data-line='116' class='line-number'></div><div data-line='117' class='line-number'></div></pre></td><td class='main  rb'><pre><div class='line'><span class="c1"># usage rake new_post[my-new-post] or rake new_post[&#39;my new post&#39;] or rake new_post (defaults to &quot;new-post&quot;)</span>
</div><div class='line'><span class="n">desc</span> <span class="s2">&quot;Begin a new post in </span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">posts_dir</span><span class="si">}</span><span class="s2">&quot;</span>
</div><div class='line'><span class="n">task</span> <span class="ss">:new_post</span><span class="p">,</span> <span class="ss">:title</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</div><div class='line'>  <span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">title</span>
</div><div class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">title</span>
</div><div class='line'>  <span class="k">else</span>
</div><div class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">get_stdin</span><span class="p">(</span><span class="s2">&quot;Enter a title for your post: &quot;</span><span class="p">)</span>
</div><div class='line'>  <span class="k">end</span>
</div><div class='line'>  <span class="k">raise</span> <span class="s2">&quot;### You haven&#39;t set anything up yet. First run `rake install` to set up an Octopress theme.&quot;</span> <span class="k">unless</span> <span class="no">File</span><span class="o">.</span><span class="n">directory?</span><span class="p">(</span><span class="n">source_dir</span><span class="p">)</span>
</div><div class='line'>  <span class="n">mkdir_p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">posts_dir</span><span class="si">}</span><span class="s2">&quot;</span>
</div><div class='line'>  <span class="n">filename</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">posts_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">title</span><span class="o">.</span><span class="n">to_url</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="n">new_post_ext</span><span class="si">}</span><span class="s2">&quot;</span>
</div><div class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</div><div class='line'>    <span class="nb">abort</span><span class="p">(</span><span class="s2">&quot;rake aborted!&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">ask</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2"> already exists. Do you want to overwrite?&quot;</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="o">]</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;n&#39;</span>
</div><div class='line'>  <span class="k">end</span>
</div><div class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Creating new post: </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</div><div class='line'>  <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</div><div class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;---&quot;</span>
</div><div class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;layout: post&quot;</span>
</div><div class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;title: </span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">title</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/&amp;/</span><span class="p">,</span><span class="s1">&#39;&amp;amp;&#39;</span><span class="p">)</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</div><div class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;date: </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d %H:%M:%S %z&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</div><div class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;comments: true&quot;</span>
</div><div class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;categories: &quot;</span>
</div><div class='line marked start'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;description: &quot;</span>
</div><div class='line marked end'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;keywords: &quot;</span>
</div><div class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;---&quot;</span>
</div><div class='line'>  <span class="k">end</span>
</div></pre></td></tr></table></div></figure>


<h2>Reference</h2>

<ul>
<li><a href="http://xit0.org/2013/05/seo-for-octopress-websites/" target="_blank">SEO for Octopress Websites</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Octopress with Github pages in Windows]]></title>
    <link href="http://benedict-chan.github.io/blog/2014/01/28/setup-octopress-with-github-pages-in-windows/"/>
    <updated>2014-01-28T14:11:37+11:00</updated>
    <id>http://benedict-chan.github.io/blog/2014/01/28/setup-octopress-with-github-pages-in-windows</id>
    <content type="html"><![CDATA[<h2>Software</h2>

<ol>
<li>Install <a href="http://git-scm.com/">Git</a>, <a href="http://windows.github.com">GitHub for Windows</a></li>
<li>Install <a href="http://rubyinstaller.org/downloads/">Ruby Installer for Windows</a></li>
<li>Install <a href="https://github.com/oneclick/rubyinstaller/downloads/">Ruby Development Kit</a>
, extract this to a folder like <code>C:\RubyDevKit</code></li>
</ol>


<h2>Setup Ruby</h2>

<pre><code>cd C:\RubyDevKit
ruby dk.rb init
ruby dk.rb install
</code></pre>

<h2>Setup Octopress</h2>

<h4>Go to your source folder and clone Octopress</h4>

<pre><code>git clone git://github.com/imathis/octopress.git username
</code></pre>

<!-- more -->


<h4>Install ruby&rsquo;s bundler</h4>

<pre><code>cd username
gem install bundler
bundle install
</code></pre>

<h2>Setup Github repository and pages</h2>

<p>Create a new repository named: <code>username.github.io</code> in github</p>

<h4>Fix hellip in Windows</h4>

<p>In order to generate our first Octopress templates, we have to modify the <code>Rakefile</code>, just remove <code>&amp;hellip;</code></p>

<figure class='code'><figcaption>Rakefile</figcaption><div class='highlight'><table><tr><td class='line-numbers' aria-hidden='true'><pre><div data-line='348' class='line-number'></div><div data-line='349' class='line-number marked start end'></div><div data-line='350' class='line-number'></div></pre></td><td class='main  rb'><pre><div class='line'><span class="nb">system</span> <span class="s2">&quot;git init&quot;</span>
</div><div class='line marked start end'><span class="nb">system</span> <span class="s2">&quot;echo &#39;My Octopress Page is coming soon&#39; &gt; index.html&quot;</span>
</div><div class='line'><span class="nb">system</span> <span class="s2">&quot;git add .&quot;</span>
</div></pre></td></tr></table></div></figure>


<p>You can then run</p>

<pre><code>rake setup_github_pages
</code></pre>

<p>This will ask your github repository url and add your repository as the default origin, you can check this after by</p>

<pre><code>git remote -v
</code></pre>

<h4>Config the blog</h4>

<p>Just head to the file <a href="http://octopress.org/docs/configuring/"><code>_config.ym</code></a></p>

<h2>Create your site</h2>

<pre><code>rake generate
</code></pre>

<h2>Preview it locally</h2>

<pre><code>rake preview
</code></pre>

<p>It should now be shown in <a href="http://localhost:4000" target="_blank"><a href="http://localhost:4000">http://localhost:4000</a></a></p>

<h2>Start a new Post</h2>

<pre><code>rake new_post["New Post"]
</code></pre>

<h2>Deploy to github</h2>

<pre><code>rake deploy
</code></pre>

<p>This will generate your copy and copied to <code>_deploy</code> folder.</p>

<h2>Commit your source too</h2>

<pre><code>git add .
git commit -m 'your message'
git push origin source
</code></pre>

<h2>Reference</h2>

<ul>
<li><a href="http://www.techelex.org/setup-octopress-on-windows7/" target="_blank">Setup Octopress on Windows7</a></li>
<li><a href="http://derantell.github.io/blog/2012/12/02/getting-started-with-octopress-on-windows/" target="_blank">Getting Started With Octopress on Windows</a></li>
<li><a href="http://octopress.org/docs/blogging/code/" target="_blank">Sharing Code Snippets</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
